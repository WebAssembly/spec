;;
;; Contexts
;;

syntax context hint(desc "context") =
  { TYPES functype*, FUNCS functype*, GLOBALS globaltype*,
    TABLES tabletype*, MEMS memtype*,
    LOCALS valtype*, LABELS resulttype*, RETURN resulttype? }

var C : context



;;
;; Types
;;

relation Limits_ok: |- limits : nat         hint(show "K-limits")
relation Functype_ok: |- functype : OK      hint(show "K-func")
relation Globaltype_ok: |- globaltype : OK  hint(show "K-global")
relation Tabletype_ok: |- tabletype : OK    hint(show "K-table")
relation Memtype_ok: |- memtype : OK        hint(show "K-mem")
relation Externtype_ok: |- externtype : OK  hint(show "K-extern")


rule Limits_ok:
  |- `[n .. m?] : k
  -- if n <= k
  -- (if n <= m <= k)?

rule Functype_ok:
  |- t_1* -> t_2? : OK

rule Globaltype_ok:
  |- MUT? t : OK

rule Tabletype_ok:
  |- limits : OK
  -- Limits_ok: |- limits : $(2^32-1)

rule Memtype_ok:
  |- limits : OK
  -- Limits_ok: |- limits : $(2^16)


rule Externtype_ok/func:
  |- FUNC functype : OK
  -- Functype_ok: |- functype : OK

rule Externtype_ok/global:
  |- GLOBAL globaltype : OK
  -- Globaltype_ok: |- globaltype : OK

rule Externtype_ok/table:
  |- TABLE tabletype : OK
  -- Tabletype_ok: |- tabletype : OK

rule Externtype_ok/mem:
  |- MEM memtype : OK
  -- Memtype_ok: |- memtype : OK



;;
;; Subtyping
;;

;; External types

relation Limits_sub: |- limits <: limits             hint(show "S-limits")
relation Functype_sub: |- functype <: functype       hint(show "S-func")
relation Globaltype_sub: |- globaltype <: globaltype hint(show "S-global")
relation Tabletype_sub: |- tabletype <: tabletype    hint(show "S-table")
relation Memtype_sub: |- memtype <: memtype          hint(show "S-mem")
relation Externtype_sub: |- externtype <: externtype hint(show "S-extern")


rule Limits_sub:
  |- `[n_11 .. n_12] <: `[n_21 .. n_22]
  -- if n_11 >= n_21
  -- if n_12 <= n_22

rule Functype_sub:
  |- ft <: ft

rule Globaltype_sub:
  |- gt <: gt

rule Tabletype_sub:
  |- lim_1 <: lim_2
  -- Limits_sub: |- lim_1 <: lim_2

rule Memtype_sub:
  |- lim_1 <: lim_2
  -- Limits_sub: |- lim_1 <: lim_2


rule Externtype_sub/func:
  |- FUNC ft_1 <: FUNC ft_2
  -- Functype_sub: |- ft_1 <: ft_2

rule Externtype_sub/global:
  |- GLOBAL gt_1 <: GLOBAL gt_2
  -- Globaltype_sub: |- gt_1 <: gt_2

rule Externtype_sub/table:
  |- TABLE tt_1 <: TABLE tt_2
  -- Tabletype_sub: |- tt_1 <: tt_2

rule Externtype_sub/mem:
  |- MEM mt_1 <: MEM mt_2
  -- Memtype_sub: |- mt_1 <: mt_2



;;
;; Instructions
;;

relation Instr_ok: context |- instr : functype   hint(show "T")
relation Instrs_ok: context |- instr* : functype hint(show "T*")
relation Expr_ok: context |- expr : resulttype   hint(show "T-expr")


;; Expressions

rule Expr_ok:
  C |- instr* : t?
  -- Instrs_ok: C |- instr* : eps -> t?


;; Instruction sequences

rule Instrs_ok/empty:
  C |- eps : eps -> eps

rule Instrs_ok/seq:
  C |- instr_1 instr_2* : t_1* -> t_3*
  -- Instr_ok: C |- instr_1 : t_1* -> t_2*
  -- Instrs_ok: C |- instr_2* : t_2* -> t_3*

rule Instrs_ok/frame:
  C |- instr* : t* t_1* -> t* t_2*
  -- Instrs_ok: C |- instr* : t_1* -> t_2*


;; Parametric instructions

rule Instr_ok/nop:
  C |- NOP : eps -> eps

rule Instr_ok/unreachable:
  C |- UNREACHABLE : t_1* -> t_2*

rule Instr_ok/drop:
  C |- DROP : t -> eps

rule Instr_ok/select:
  C |- SELECT : t t I32 -> t


;; Block instructions

rule Instr_ok/block:
  C |- BLOCK t? instr* : eps -> t?
  -- Instrs_ok: {LABELS (t?)} ++ C |- instr* : eps -> t?

rule Instr_ok/loop:
  C |- LOOP t? instr* : eps -> t?
  -- Instrs_ok: {LABELS (eps)} ++ C |- instr* : eps -> eps

rule Instr_ok/if:
  C |- IF t? instr_1* ELSE instr_2* : I32 -> t?
  -- Instrs_ok: {LABELS (t?)} ++ C |- instr_1* : eps -> t?
  -- Instrs_ok: {LABELS (t?)} ++ C |- instr_2* : eps -> t?


;; Branch instructions

rule Instr_ok/br:
  C |- BR l : t_1* t? -> t_2*
  -- if C.LABELS[l] = t?

rule Instr_ok/br_if:
  C |- BR_IF l : t? I32 -> t?
  -- if C.LABELS[l] = t?

rule Instr_ok/br_table:
  C |- BR_TABLE l* l' : t_1* t? I32 -> t_2*
  -- if t? = C.LABELS[l']
  -- if (t? = C.LABELS[l])*


;; Function instructions

rule Instr_ok/call:
  C |- CALL x : t_1* -> t_2?
  -- if C.FUNCS[x] = t_1* -> t_2?

rule Instr_ok/call_indirect:
  C |- CALL_INDIRECT x : t_1* I32 -> t_2?
  -- if C.TYPES[x] = t_1* -> t_2?

rule Instr_ok/return:
  C |- RETURN : t_1* t? -> t_2*
  -- if C.RETURN = (t?)


;; Numeric instructions

rule Instr_ok/const:
  C |- CONST t c_t : eps -> t

rule Instr_ok/unop:
  C |- UNOP t unop_t : t -> t

rule Instr_ok/binop:
  C |- BINOP t binop_t : t t -> t

rule Instr_ok/testop:
  C |- TESTOP t testop_t : t -> I32

rule Instr_ok/relop:
  C |- RELOP t relop_t : t t -> I32


;; TODO: move side conditions to syntax
rule Instr_ok/cvtop-reinterpret:
  C |- CVTOP nt_1 nt_2 REINTERPRET : nt_2 -> nt_1
  -- if $size(nt_1) = $size(nt_2)

rule Instr_ok/cvtop-convert:
  C |- CVTOP nt_1 nt_2 cvtop : nt_2 -> nt_1


;; Local instructions

rule Instr_ok/local.get:
  C |- LOCAL.GET x : eps -> t
  -- if C.LOCALS[x] = t

rule Instr_ok/local.set:
  C |- LOCAL.SET x : t -> eps
  -- if C.LOCALS[x] = t

rule Instr_ok/local.tee:
  C |- LOCAL.TEE x : t -> t
  -- if C.LOCALS[x] = t


;; Global instructions

rule Instr_ok/global.get:
  C |- GLOBAL.GET x : eps -> t
  -- if C.GLOBALS[x] = mut t

rule Instr_ok/global.set:
  C |- GLOBAL.SET x : t -> eps
  -- if C.GLOBALS[x] = MUT t


;; Memory instructions

rule Instr_ok/memory.size:
  C |- MEMORY.SIZE : eps -> I32
  -- if C.MEMS[0] = mt

rule Instr_ok/memory.grow:
  C |- MEMORY.GROW : I32 -> I32
  -- if C.MEMS[0] = mt

(;
rule Instr_ok/load:
  C |- LOAD t (n _ sx)? memarg : I32 -> t
  -- if C.MEMS[0] = mt
  -- if $(2^(memarg.ALIGN) <= $size(t)/8)
  -- if $(2^(memarg.ALIGN) <= n/8 < $size(t)/8)?
  -- if n? = eps \/ t = Inn
;)

rule Instr_ok/load-val:
  C |- LOAD t memarg : I32 -> t
  -- if C.MEMS[0] = mt
  -- if $(2^(memarg.ALIGN) <= $size(t)/8)

rule Instr_ok/load-pack:
  C |- LOAD Inn (M _ sx) memarg : I32 -> Inn
  -- if C.MEMS[0] = mt
  -- if $(2^(memarg.ALIGN) <= M/8)

(;
rule Instr_ok/store:
  C |- STORE t n? memarg : I32 t -> eps
  -- if C.MEMS[0] = mt
  -- if $(2^(memarg.ALIGN) <= $size(t)/8)
  -- if $(2^(memarg.ALIGN) <= n/8 < $size(t)/8)?
  -- if n? = eps \/ t = Inn
;)

rule Instr_ok/store-val:
  C |- STORE t memarg : I32 t -> eps
  -- if C.MEMS[0] = mt
  -- if $(2^(memarg.ALIGN) <= $size(t)/8)

rule Instr_ok/store-pack:
  C |- STORE Inn M memarg : I32 Inn -> eps
  -- if C.MEMS[0] = mt
  -- if $(2^(memarg.ALIGN) <= M/8)


;;
;; Constant Expressions
;;

relation Instr_const: context |- instr CONST              hint(show "C-instr")
relation Expr_const: context |- expr CONST                hint(show "C-expr")
relation Expr_ok_const: context |- expr : valtype? CONST  hint(show "TC-expr")

rule Instr_const/const:
  C |- (CONST t c) CONST

rule Instr_const/global.get:
  C |- (GLOBAL.GET x) CONST
  -- if C.GLOBALS[x] = t


rule Expr_const: C |- instr* CONST
  -- (Instr_const: C |- instr CONST)*


rule Expr_ok_const:
  C |- expr : t? CONST
  -- Expr_ok: C |- expr : t?
  -- Expr_const: C |- expr CONST


;;
;; Modules
;;

relation Type_ok: |- type : functype                 hint(show "T-type")
relation Func_ok: context |- func : functype         hint(show "T-func")
relation Global_ok: context |- global : globaltype   hint(show "T-global")
relation Table_ok: context |- table : tabletype      hint(show "T-table")
relation Mem_ok: context |- mem : memtype            hint(show "T-mem")
relation Elem_ok: context |- elem : OK               hint(show "T-elem")
relation Data_ok: context |- data : OK               hint(show "T-data")
relation Start_ok: context |- start : OK             hint(show "T-start")


;; Module definitions

rule Type_ok:
  |- TYPE ft : ft
  -- Functype_ok: |- ft : OK

rule Func_ok:
  C |- FUNC x (LOCAL t)* expr : t_1* -> t_2?
  -- if C.TYPES[x] = t_1* -> t_2?
  -- Expr_ok: C ++ {LOCALS t_1* t*, LABELS (t_2?), RETURN (t_2?)} |- expr : t_2?

rule Global_ok:
  C |- GLOBAL gt expr : gt
  -- Globaltype_ok: |- gt : OK
  -- if gt = mut t
  -- Expr_ok_const: C |- expr : t CONST

rule Table_ok:
  C |- TABLE tt : tt
  -- Tabletype_ok: |- tt : OK

rule Mem_ok:
  C |- MEMORY mt : mt
  -- Memtype_ok: |- mt : OK

;; TODO: check bounds
rule Elem_ok:
  C |- ELEM expr x* : OK
  -- if C.TABLES[0] = lim
  -- Expr_ok_const: C |- expr : I32 CONST
  -- if (C.FUNCS[x] = ft)*

;; TODO: check bounds
rule Data_ok:
  C |- DATA expr b* : OK
  -- if C.MEMS[0] = lim
  -- Expr_ok_const: C |- expr : I32 CONST

rule Start_ok:
  C |- START x : OK
  -- if C.FUNCS[x] = eps -> eps


;; Module im/exports

relation Import_ok: context |- import : externtype        hint(show "T-import")
relation Export_ok: context |- export : externtype        hint(show "T-export")
relation Externidx_ok: context |- externidx : externtype  hint(show "T-externidx")

rule Import_ok:
  C |- IMPORT name_1 name_2 xt : xt
  -- Externtype_ok: |- xt : OK

rule Export_ok:
  C |- EXPORT name externidx : xt
  -- Externidx_ok: C |- externidx : xt


rule Externidx_ok/func:
  C |- FUNC x : FUNC ft
  -- if C.FUNCS[x] = ft

rule Externidx_ok/global:
  C |- GLOBAL x : GLOBAL gt
  -- if C.GLOBALS[x] = gt

rule Externidx_ok/table:
  C |- TABLE x : TABLE tt
  -- if C.TABLES[x] = tt

rule Externidx_ok/mem:
  C |- MEM x : MEM mt
  -- if C.MEMS[x] = mt


;; Modules proper

relation Module_ok: |- module : OK      hint(show "T-module")

rule Module_ok:
  |- MODULE type* import* func* global* table* mem* elem* data* start? export* : OK
  -- (Type_ok: |- type : ft')*
  -- (Import_ok: {TYPES ft'*} |- import : ixt)*
  ----
  -- (Global_ok: C' |- global : gt)*
  -- (Func_ok: C |- func : ft)*
  -- (Table_ok: C |- table : tt)*
  -- (Mem_ok: C |- mem : mt)*
  ----
  -- (Elem_ok: C |- elem : OK)*
  -- (Data_ok: C |- data : OK)*
  -- (Start_ok: C |- start : OK)?
  -- (Export_ok: C |- export : xt)*
  ----
  -- if |tt*| <= 1
  -- if |mt*| <= 1
  ;; -- TODO: disjoint export names
  ----
  -- if C = {TYPES ft'*, FUNCS ift* ft*, GLOBALS igt* gt*, TABLES itt* tt*, MEMS imt* mt*}
  ----
  -- if C' = {TYPES ft'*, FUNCS ift* ft*, GLOBALS igt*}
  ----
  -- if ift* = $funcsxt(ixt*)
  -- if igt* = $globalsxt(ixt*)
  -- if itt* = $tablesxt(ixt*)
  -- if imt* = $memsxt(ixt*)
