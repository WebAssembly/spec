;;
;; Auxiliary Definitions on Types
;;

;; Size

;; def |I n| = |F n| = |V n| = n        ;; ????

;;def $size(valtype) : nat  hint(partial) hint(show |%|)

def $size(I32) = 32
def $size(I64) = 64
def $size(F32) = 32
def $size(F64) = 64


;; Projections

;; TODO: use built-in notation
def $funcsxt(externtype*) : functype*      hint(show $funcs(%))
def $globalsxt(externtype*) : globaltype*  hint(show $globals(%))
def $tablesxt(externtype*) : tabletype*    hint(show $tables(%))
def $memsxt(externtype*) : memtype*        hint(show $mems(%))

def $funcsxt(eps) = eps
def $funcsxt((FUNC ft) xt*) = ft $funcsxt(xt*)
def $funcsxt(externtype xt*) = $funcsxt(xt*)  -- otherwise

def $globalsxt(eps) = eps
def $globalsxt((GLOBAL gt) xt*) = gt $globalsxt(xt*)
def $globalsxt(externtype xt*) = $globalsxt(xt*)  -- otherwise

def $tablesxt(eps) = eps
def $tablesxt((TABLE tt) xt*) = tt $tablesxt(xt*)
def $tablesxt(externtype xt*) = $tablesxt(xt*)  -- otherwise

def $memsxt(eps) = eps
def $memsxt((MEM mt) xt*) = mt $memsxt(xt*)
def $memsxt(externtype xt*) = $memsxt(xt*)  -- otherwise



;;
;; Auxiliary definitions on Instructions
;;

;; Shorthands for Instructions

def $memarg0 : memarg  hint(show )
def $memarg0 = {ALIGN 0, OFFSET 0}
