;;
;; Numerics
;;

;; Conversions

def $bool(bool) : nat
def $bool(false) = 0
def $bool(true) = 1

def $truncz(rat) : int
def $truncz hint(builtin)
;;def $trunc(+-q) = +-n  -- if n <- nat /\ $(q - 1) < n <= q


;; Signed numbers

def $signed_(N, nat) : int hint(inverse $inv_signed_)
def $signed_(N, i) = i           -- if $(i < 2^(N-1))
def $signed_(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $inv_signed_(N, int) : nat    hint(show $signed_(%)^(-1)#((%)))
def $inv_signed_(N, i) = i          -- if $(0 <= i < 2^(N-1))
def $inv_signed_(N, i) = $(i + 2^N) -- if $(-2^(N-1) <= i < 0)

;; TODO

def $unop_(valtype, unop_(valtype), val_(valtype)) : val_(valtype)*
    hint(show %2#$_(%1)#((%3)))
def $binop_(valtype, binop_(valtype), val_(valtype), val_(valtype)) : val_(valtype)*
    hint(show %2#$_(%1)#(%3, %4))
def $testop_(valtype, testop_(valtype), val_(valtype)) : val_(I32)
    hint(show %2#$_(%1)#((%3)))
def $relop_(valtype, relop_(valtype), val_(valtype), val_(valtype)) : val_(I32)
    hint(show %2#$_(%1)#(%3, %4))
def $cvtop__(valtype_1, valtype_2, cvtop, val_(valtype_1)) : val_(valtype_2)*
    hint(show %3#$__(%1,%2)#((%4)))

def $wrap__(M, N, iN(M)) : iN(N)
def $extend__(M, N, sx, iN(M)) : iN(N)               hint(show $extend__(%,%)^(%)#((%)))
def $trunc__(M, N, sx, fN(M)) : iN(N)?               hint(show $trunc__(%,%)^(%)#((%)))
def $demote__(M, N, fN(M)) : fN(N)*
def $promote__(M, N, fN(M)) : fN(N)*
def $convert__(M, N, sx, iN(M)) : fN(N)              hint(show $convert__(%,%)^(%)#((%)))
def $reinterpret__(valtype_1, valtype_2, val_(valtype_1)) : val_(valtype_2)

;; TODO(3, rossberg): implement numerics internally
def $wrap__        hint(builtin)
def $extend__      hint(builtin)
def $trunc__       hint(builtin)
def $demote__      hint(builtin)
def $promote__     hint(builtin)
def $convert__     hint(builtin)
def $reinterpret__ hint(builtin)

def $ibytes_(N, iN(N)) : byte*                   hint(show $bytes_(I#%,%)) hint(inverse $inv_ibytes_)
def $fbytes_(N, fN(N)) : byte*                   hint(show $bytes_(F#%,%)) hint(inverse $inv_fbytes_)
def $bytes_(valtype, val_(valtype)) : byte*      hint(inverse $inv_bytes_)

def $inv_ibytes_(N, byte*) : iN(N)               hint(show $bytes_(I#%,%))
def $inv_fbytes_(N, byte*) : fN(N)               hint(show $bytes_(F#%,%))
def $inv_bytes_(valtype, byte*) : val_(valtype)  hint(show $bytes_(%,%))

def $ibytes_ hint(builtin)
def $fbytes_ hint(builtin)
def $bytes_ hint(builtin)

def $inv_ibytes_ hint(builtin)
def $inv_fbytes_ hint(builtin)
def $inv_bytes_ hint(builtin)


def $iadd_(N, iN(N), iN(N)) : iN(N)
def $isub_(N, iN(N), iN(N)) : iN(N)
def $imul_(N, iN(N), iN(N)) : iN(N)
def $idiv_(N, sx, iN(N), iN(N)) : iN(N)? hint(show $idiv_(%)^(%)#((%,%)))
def $irem_(N, sx, iN(N), iN(N)) : iN(N)? hint(show $irem_(%)^(%)#((%,%)))
def $inot_(N, iN(N)) : iN(N)
def $iand_(N, iN(N), iN(N)) : iN(N)
def $ior_(N, iN(N), iN(N)) : iN(N)
def $ixor_(N, iN(N), iN(N)) : iN(N)
def $ishl_(N, iN(N), u32) : iN(N)
def $ishr_(N, sx, iN(N), u32) : iN(N)    hint(show $ishr_(%)^(%)#((%,%)))
def $irotl_(N, iN(N), iN(N)) : iN(N)
def $irotr_(N, iN(N), iN(N)) : iN(N)
def $iclz_(N, iN(N)) : iN(N)
def $ictz_(N, iN(N)) : iN(N)
def $ipopcnt_(N, iN(N)) : iN(N)
def $ieqz_(N, iN(N)) : u32
def $inez_(N, iN(N)) : u32
def $ieq_(N, iN(N), iN(N)) : u32
def $ine_(N, iN(N), iN(N)) : u32
def $ilt_(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_(%)^(%)#((%,%)))
def $igt_(N, sx, iN(N), iN(N)) : u32     hint(show $igt_(%)^(%)#((%,%)))
def $ile_(N, sx, iN(N), iN(N)) : u32     hint(show $ile_(%)^(%)#((%,%)))
def $ige_(N, sx, iN(N), iN(N)) : u32     hint(show $ige_(%)^(%)#((%,%)))

def $iadd_(N, i_1, i_2) = $((i_1 + i_2) \ 2^N)
def $isub_(N, i_1, i_2) = $((2^N + i_1 - i_2) \ 2^N)
def $imul_(N, i_1, i_2) = $((i_1 * i_2) \ 2^N)

def $idiv_(N, U, i_1, 0)   = eps
def $idiv_(N, U, i_1, i_2) = $truncz($(i_1 / i_2))
def $idiv_(N, S, i_1, 0)   = eps
def $idiv_(N, S, i_1, i_2) = eps  -- if $($signed_(N, i_1) / $signed_(N, i_2)) = $rat$(2^(N-1))
def $idiv_(N, S, i_1, i_2) = $inv_signed_(N, $truncz($($signed_(N, i_1) / $signed_(N, i_2))))

def $irem_(N, U, i_1, 0)   = eps
def $irem_(N, U, i_1, i_2) = $(i_1 - i_2 * $truncz($(i_1 / i_2)))
def $irem_(N, S, i_1, 0)   = eps
def $irem_(N, S, i_1, i_2) = $inv_signed_(N, $(j_1 - j_2 * $truncz($(j_1 / j_2))))
                             -- if j_1 = $signed_(N, i_1) /\ j_2 = $signed_(N, i_2)

;; TODO(3, rossberg): implement all numerics internally
def $inot_ hint(builtin)
def $iand_ hint(builtin)
def $ior_  hint(builtin)
def $ixor_ hint(builtin)
def $ishl_ hint(builtin)
def $ishr_ hint(builtin)
def $irotl_ hint(builtin)
def $irotr_ hint(builtin)
def $iclz_  hint(builtin)
def $ictz_  hint(builtin)
def $ipopcnt_ hint(builtin)

def $ieqz_(N, i_1) = $bool(i_1 = 0)
def $inez_(N, i_1) = $bool(i_1 =/= 0)

def $ieq_(N, i_1, i_2) = $bool(i_1 = i_2)
def $ine_(N, i_1, i_2) = $bool(i_1 =/= i_2)

def $ilt_(N, U, i_1, i_2) = $bool(i_1 < i_2)
def $ilt_(N, S, i_1, i_2) = $bool($signed_(N, i_1) < $signed_(N, i_2))

def $igt_(N, U, i_1, i_2) = $bool(i_1 > i_2)
def $igt_(N, S, i_1, i_2) = $bool($signed_(N, i_1) > $signed_(N, i_2))

def $ile_(N, U, i_1, i_2) = $bool(i_1 <= i_2)
def $ile_(N, S, i_1, i_2) = $bool($signed_(N, i_1) <= $signed_(N, i_2))

def $ige_(N, U, i_1, i_2) = $bool(i_1 >= i_2)
def $ige_(N, S, i_1, i_2) = $bool($signed_(N, i_1) >= $signed_(N, i_2))

def $fadd_(N, fN(N), fN(N)) : fN(N)*
def $fsub_(N, fN(N), fN(N)) : fN(N)*
def $fmul_(N, fN(N), fN(N)) : fN(N)*
def $fdiv_(N, fN(N), fN(N)) : fN(N)*
def $fmin_(N, fN(N), fN(N)) : fN(N)*
def $fmax_(N, fN(N), fN(N)) : fN(N)*
def $fcopysign_(N, fN(N), fN(N)) : fN(N)*
def $fabs_(N, fN(N)) : fN(N)*
def $fneg_(N, fN(N)) : fN(N)*
def $fsqrt_(N, fN(N)) : fN(N)*
def $fceil_(N, fN(N)) : fN(N)*
def $ffloor_(N, fN(N)) : fN(N)*
def $ftrunc_(N, fN(N)) : fN(N)*
def $fnearest_(N, fN(N)) : fN(N)*
def $feq_(N, fN(N), fN(N)) : u32
def $fne_(N, fN(N), fN(N)) : u32
def $flt_(N, fN(N), fN(N)) : u32
def $fgt_(N, fN(N), fN(N)) : u32
def $fle_(N, fN(N), fN(N)) : u32
def $fge_(N, fN(N), fN(N)) : u32

def $fadd_  hint(builtin)
def $fsub_  hint(builtin)
def $fmul_  hint(builtin)
def $fdiv_  hint(builtin)
def $fmin_  hint(builtin)
def $fmax_  hint(builtin)

def $fcopysign_ hint(builtin)
def $fabs_      hint(builtin)
def $fneg_      hint(builtin)
def $fsqrt_     hint(builtin)
def $fceil_     hint(builtin)
def $ffloor_    hint(builtin)
def $ftrunc_    hint(builtin)
def $fnearest_  hint(builtin)

def $feq_ hint(builtin)
def $fne_ hint(builtin)
def $flt_ hint(builtin)
def $fgt_ hint(builtin)
def $fle_ hint(builtin)
def $fge_ hint(builtin)


def $binop_(Inn, ADD, iN_1, iN_2) = $iadd_($size(Inn), iN_1, iN_2)
def $binop_(Inn, SUB, iN_1, iN_2) = $isub_($size(Inn), iN_1, iN_2)
def $binop_(Inn, MUL, iN_1, iN_2) = $imul_($size(Inn), iN_1, iN_2)
def $binop_(Inn, DIV sx, iN_1, iN_2) = $list_(val_(Inn), $idiv_($size(Inn), sx, iN_1, iN_2))
def $binop_(Inn, REM sx, iN_1, iN_2) = $list_(val_(Inn), $irem_($size(Inn), sx, iN_1, iN_2))
def $binop_(Inn, AND, iN_1, iN_2) = $iand_($size(Inn), iN_1, iN_2)
def $binop_(Inn, OR, iN_1, iN_2) = $ior_($size(Inn), iN_1, iN_2)
def $binop_(Inn, XOR, iN_1, iN_2) = $ixor_($size(Inn), iN_1, iN_2)
def $binop_(Inn, SHL, iN_1, iN_2) = $ishl_($size(Inn), iN_1, iN_2)
def $binop_(Inn, SHR sx, iN_1, iN_2) = $ishr_($size(Inn), sx, iN_1, iN_2)
def $binop_(Inn, ROTL, iN_1, iN_2) = $irotl_($size(Inn), iN_1, iN_2)
def $binop_(Inn, ROTR, iN_1, iN_2) = $irotr_($size(Inn), iN_1, iN_2)
def $unop_(Inn, CLZ, iN) = $iclz_($size(Inn), iN)
def $unop_(Inn, CTZ, iN) = $ictz_($size(Inn), iN)
def $unop_(Inn, POPCNT, iN) = $ipopcnt_($size(Inn), iN)
def $testop_(Inn, EQZ, iN) = $ieqz_($size(Inn), iN)
def $relop_(Inn, EQ, iN_1, iN_2) = $ieq_($size(Inn), iN_1, iN_2)
def $relop_(Inn, NE, iN_1, iN_2) = $ine_($size(Inn), iN_1, iN_2)
def $relop_(Inn, LT sx, iN_1, iN_2) = $ilt_($size(Inn), sx, iN_1, iN_2)
def $relop_(Inn, GT sx, iN_1, iN_2) = $igt_($size(Inn), sx, iN_1, iN_2)
def $relop_(Inn, LE sx, iN_1, iN_2) = $ile_($size(Inn), sx, iN_1, iN_2)
def $relop_(Inn, GE sx, iN_1, iN_2) = $ige_($size(Inn), sx, iN_1, iN_2)

def $binop_(Fnn, ADD, fN_1, fN_2) = $fadd_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, SUB, fN_1, fN_2) = $fsub_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, MUL, fN_1, fN_2) = $fmul_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, DIV, fN_1, fN_2) = $fdiv_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, MIN, fN_1, fN_2) = $fmin_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, MAX, fN_1, fN_2) = $fmax_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, COPYSIGN, fN_1, fN_2) = $fcopysign_($size(Fnn), fN_1, fN_2)

def $unop_(Fnn, ABS, fN) = $fabs_($size(Fnn), fN)
def $unop_(Fnn, NEG, fN) = $fneg_($size(Fnn), fN)
def $unop_(Fnn, SQRT, fN) = $fsqrt_($size(Fnn), fN)
def $unop_(Fnn, CEIL, fN) = $fceil_($size(Fnn), fN)
def $unop_(Fnn, FLOOR, fN) = $ffloor_($size(Fnn), fN)
def $unop_(Fnn, TRUNC, fN) = $ftrunc_($size(Fnn), fN)
def $unop_(Fnn, NEAREST, fN) = $fnearest_($size(Fnn), fN)

def $relop_(Fnn, EQ, fN_1, fN_2) = $feq_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, NE, fN_1, fN_2) = $fne_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, LT, fN_1, fN_2) = $flt_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, GT, fN_1, fN_2) = $fgt_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, LE, fN_1, fN_2) = $fle_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, GE, fN_1, fN_2) = $fge_($size(Fnn), fN_1, fN_2)

def $cvtop__(I32, I64, EXTEND sx, iN) = $extend__(32, 64, sx, iN)
def $cvtop__(I64, I32, WRAP, iN) = $wrap__(64, 32, iN)
def $cvtop__(Fnn, Inn, TRUNC sx, fN) = $list_(val_(Inn), $trunc__($size(Fnn), $size(Inn), sx, fN))
def $cvtop__(F32, F64, PROMOTE, fN) = $promote__(32, 64, fN)
def $cvtop__(F64, F32, DEMOTE, fN) = $demote__(64, 32, fN)
def $cvtop__(Inn, Fnn, CONVERT sx, iN) = $convert__($size(Inn), $size(Fnn), sx, iN)
def $cvtop__(Inn, Fnn, REINTERPRET, iN) = $reinterpret__(Inn, Fnn, iN) -- if $size(Inn) = $size(Fnn)
def $cvtop__(Fnn, Inn, REINTERPRET, fN) = $reinterpret__(Fnn, Inn, fN) -- if $size(Inn) = $size(Fnn)
