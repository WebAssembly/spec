;;
;; Configurations
;;

relation Step: config ~> config                 hint(show "E") hint(tabular)
relation Step_pure: admininstr* ~> admininstr*  hint(show "E") hint(tabular)
relation Step_read: config ~> admininstr*       hint(show "E") hint(tabular)
relation Steps: config ~>* config               hint(show "E") hint(tabular)

rule Step/pure:
  z; instr*  ~>  z; instr'*
  -- Step_pure: instr* ~> instr'*

rule Step/read:
  z; instr*  ~>  z; instr'*
  -- Step_read: z; instr* ~> instr'*

rule Steps/refl:
  z; admininstr* ~>* z; admininstr*

rule Steps/trans:
  z; admininstr*  ~>*  z''; admininstr''*
  -- Step: z; admininstr*  ~>  z'; admininstr'*
  -- Steps: z'; admininstr'*  ~>*  z''; admininstr''*


;; Expressions

relation Eval_expr: state; expr ~>* state; val*  hint(show "E-expr") hint(tabular)

rule Eval_expr:
  z; instr*  ~>*  z'; val*
  -- Steps: z; instr*  ~>*  z'; val*


;;
;; Instructions
;;

;; Polymorphic instructions

rule Step_pure/unreachable:
  UNREACHABLE  ~>  TRAP

rule Step_pure/nop:
  NOP  ~>  eps

rule Step_pure/drop:
  val DROP  ~>  eps


rule Step_pure/select-true:
  val_1 val_2 (CONST I32 c) (SELECT t*?)  ~>  val_1
  -- if c =/= 0

rule Step_pure/select-false:
  val_1 val_2 (CONST I32 c) (SELECT t*?)  ~>  val_2
  -- if c = 0


;; Block instructions

def $blocktype(state, blocktype) : functype  hint(show $blocktype_(%,%))
def $blocktype(z, _RESULT eps) = eps -> eps
def $blocktype(z, _RESULT t) = eps -> t
def $blocktype(z, _IDX x) = $type(z, x)

rule Step_read/block:
  z; val^k (BLOCK bt instr*)  ~>  (LABEL_ n `{eps} val^k instr*)
  -- if $blocktype(z, bt) = t_1^k -> t_2^n

rule Step_read/loop:
  z; val^k (LOOP bt instr*)  ~>  (LABEL_ k `{LOOP bt instr*} val^k instr*)
  -- if $blocktype(z, bt) = t_1^k -> t_2^n

rule Step_pure/if-true:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_1*)
  -- if c =/= 0

rule Step_pure/if-false:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_2*)
  -- if c = 0


rule Step_pure/label-vals:
  (LABEL_ n `{instr*} val*)  ~>  val*


;; Branch instructions

;; TODO: may want a label context instead of bubbling up
rule Step_pure/br-zero:
  (LABEL_ n `{instr'*} val'* val^n (BR 0) instr*)  ~>  val^n instr'*

rule Step_pure/br-succ:
  (LABEL_ n `{instr'*} val* (BR $(l+1)) instr*)  ~>  val* (BR l)


rule Step_pure/br_if-true:
  (CONST I32 c) (BR_IF l)  ~>  (BR l)
  -- if c =/= 0

rule Step_pure/br_if-false:
  (CONST I32 c) (BR_IF l)  ~>  eps
  -- if c = 0


rule Step_pure/br_table-lt:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l*[i])
  -- if i < |l*|

rule Step_pure/br_table-ge:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l')
  -- if i >= |l*|


;; Function instructions

rule Step_read/call:
  z; (CALL x)  ~>  (CALL_ADDR $funcaddr(z)[x])  ;; TODO

rule Step_read/call_indirect-call:
  z; (CONST I32 i) (CALL_INDIRECT x y)  ~>  (CALL_ADDR a)
  -- if $table(z, x).REFS[i] = (REF.FUNC_ADDR a)
  -- if $type(z, y) = $funcinst(z)[a].TYPE

rule Step_read/call_indirect-trap:
  z; (CONST I32 i) (CALL_INDIRECT x y)  ~>  TRAP
  -- otherwise

rule Step_read/call_addr:
  z; val^k (CALL_ADDR a)  ~>  (FRAME_ n `{f} (LABEL_ n `{eps} instr*))
  -- if $funcinst(z)[a] = {TYPE (t_1^k -> t_2^n), MODULE mm, CODE func}
  -- if func = FUNC x (LOCAL t)* instr*
  -- if f = {LOCALS val^k ($default_(t))*, MODULE mm}


rule Step_pure/frame-vals:
  (FRAME_ n `{f} val^n)  ~>  val^n

rule Step_pure/return-frame:
  (FRAME_ n `{f} val'* val^n RETURN instr*)  ~>  val^n

rule Step_pure/return-label:
  (LABEL_ n `{instr'*} val* RETURN instr*)  ~>  val* RETURN


;; Traps

rule Step_pure/trap-vals:
  val* TRAP instr*  ~>  TRAP
  -- if val* =/= eps \/ instr* =/= eps

rule Step_pure/trap-label:
  (LABEL_ n `{instr'*} TRAP)  ~>  TRAP

rule Step_pure/trap-frame:
  (FRAME_ n `{f} TRAP)  ~>  TRAP


;; Context

rule Step/ctxt-label:
  z; (LABEL_ n `{instr_0*} instr*)  ~>  z'; (LABEL_ n `{instr_0*} instr'*)
  -- Step: z; instr* ~> z'; instr'*

rule Step/ctxt-frame:
  s; f; (FRAME_ n `{f'} instr*)  ~>  s'; f; (FRAME_ n `{f'} instr'*)
  -- Step: s; f'; instr* ~> s'; f'; instr'*


;; Numeric instructions

rule Step_pure/unop-val:
  (CONST nt c_1) (UNOP nt unop)  ~>  (CONST nt c)
  -- if c <- $unop_(nt, unop, c_1)

rule Step_pure/unop-trap:
  (CONST nt c_1) (UNOP nt unop)  ~>  TRAP
  -- if $unop_(nt, unop, c_1) = eps


rule Step_pure/binop-val:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  (CONST nt c)
  -- if c <- $binop_(nt, binop, c_1, c_2)

rule Step_pure/binop-trap:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  TRAP
  -- if $binop_(nt, binop, c_1, c_2) = eps


rule Step_pure/testop:
  (CONST nt c_1) (TESTOP nt testop)  ~>  (CONST I32 c)
  -- if c = $testop_(nt, testop, c_1)

rule Step_pure/relop:
  (CONST nt c_1) (CONST nt c_2) (RELOP nt relop)  ~>  (CONST I32 c)
  -- if c = $relop_(nt, relop, c_1, c_2)


rule Step_pure/cvtop-val:
  (CONST nt_1 c_1) (CVTOP nt_2 nt_1 cvtop)  ~>  (CONST nt_2 c)
  -- if c <- $cvtop__(nt_1, nt_2, cvtop, c_1)

rule Step_pure/cvtop-trap:
  (CONST nt_1 c_1) (CVTOP nt_2 nt_1 cvtop)  ~>  TRAP
  -- if $cvtop__(nt_1, nt_2, cvtop, c_1) = eps


;; Reference instructions

rule Step_read/ref.func:
  z; (REF.FUNC x) ~> (REF.FUNC_ADDR $funcaddr(z)[x])


rule Step_pure/ref.is_null-true:
  ref REF.IS_NULL  ~>  (CONST I32 1)
  -- if ref = (REF.NULL rt)

rule Step_pure/ref.is_null-false:
  ref REF.IS_NULL  ~>  (CONST I32 0)
  -- otherwise


;; Vector instructions

rule Step_pure/vvunop:
  (VCONST V128 c_1) (VVUNOP V128 vvunop)  ~>  (VCONST V128 c)
  -- if c = $vvunop_(V128, vvunop, c_1) ;; TODO


rule Step_pure/vvbinop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VVBINOP V128 vvbinop)  ~>  (VCONST V128 c)
  -- if c = $vvbinop_(V128, vvbinop, c_1, c_2) ;; TODO


rule Step_pure/vvternop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VCONST V128 c_3) (VVTERNOP V128 vvternop)  ~>  (VCONST V128 c)
  ----
  -- if c = $vvternop_(V128, vvternop, c_1, c_2, c_3) ;; TODO


rule Step_pure/vvtestop:
  (VCONST V128 c_1) (VVTESTOP V128 ANY_TRUE) ~> (CONST I32 c)
  -- if c = $ine_($size(V128), c_1, 0)


rule Step_pure/vunop:
  (VCONST V128 c_1) (VUNOP sh vunop)  ~>  (VCONST V128 c)
  -- if c <- $vunop_(sh, vunop, c_1)

rule Step_pure/vunop-trap:
  (VCONST V128 c_1) (VUNOP sh vunop)  ~>  TRAP
  -- if $vunop_(sh, vunop, c_1) = eps


rule Step_pure/vbinop-val:
  (VCONST V128 c_1) (VCONST V128 c_2) (VBINOP sh vbinop)  ~>  (VCONST V128 c)
  -- if c <- $vbinop_(sh, vbinop, c_1, c_2)

rule Step_pure/vbinop-trap:
  (VCONST V128 c_1) (VCONST V128 c_2) (VBINOP sh vbinop)  ~>  TRAP
  -- if $vbinop_(sh, vbinop, c_1, c_2) = eps


;; TODO: introduce $vitestop for uniformity
rule Step_pure/vtestop-true:
  (VCONST V128 c) (VTESTOP $($(Jnn X N)) ALL_TRUE) ~> (CONST I32 1)
  -- if ci_1* = $lanes_(Jnn X N, c)
  -- (if $(ci_1 =/= 0))*  ;; TODO: same line

rule Step_pure/vtestop-false:
  (VCONST V128 c) (VTESTOP $($(Jnn X N)) ALL_TRUE) ~> (CONST I32 0)
  -- otherwise


rule Step_pure/vrelop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VRELOP sh vrelop)  ~>  (VCONST V128 c)
  -- if $vrelop_(sh, vrelop, c_1, c_2) = c
(; TODO: this should be implemented at the same level as other pointwise ops
  -- if c'_1* = $lanes_(Lnn X N, c_1)
  -- if c'_2* = $lanes_(Lnn X N, c_2)
  -- if c = $inv_lanes_($IN($lsize(Lnn)) X N, $extend__(1, $lsize(Lnn), S, $vrelop_(Lnn X N, vrelop, c'_1, c'_2))*)
;)


rule Step_pure/vshiftop:
  (VCONST V128 c_1) (CONST I32 n) (VSHIFTOP $($(Jnn X N)) vshiftop) ~> (VCONST V128 c)
  -- if c'* = $lanes_(Jnn X N, c_1)
  -- if c = $inv_lanes_(Jnn X N, $vshiftop_(Jnn X N, vshiftop, c', n)*)


rule Step_pure/vbitmask:
  (VCONST V128 c) (VBITMASK (Jnn X N)) ~> (CONST I32 $irev_(32, ci))
  -- if ci_1* = $lanes_(Jnn X N, c)
  -- if $ibits_(32, ci) = $ilt_($lsize(Jnn), S, ci_1, 0)* (0)^(32-N)


rule Step_pure/vswizzle:
  (VCONST V128 c_1) (VCONST V128 c_2) (VSWIZZLE (Pnn X M)) ~> (VCONST V128 c)
  -- var c' : iN($lsize(Pnn))
  -- if ci* = $lanes_(Pnn X M, c_2)
  -- if c'* = $lanes_(Pnn X M, c_1) 0^(256 - M)
  -- if c = $inv_lanes_(Pnn X M, c'*[$(ci*[k])]^(k<M))


rule Step_pure/vshuffle:
  (VCONST V128 c_1) (VCONST V128 c_2) (VSHUFFLE (Pnn X N) i*) ~> (VCONST V128 c)
  -- var c' : iN($lsize(Pnn))
  -- if c'* = $lanes_(Pnn X N, c_1) ++ $lanes_(Pnn X N, c_2)
  -- if c = $inv_lanes_(Pnn X N, c'*[$(i*[k])]^(k<N))


rule Step_pure/vsplat:
  (CONST $unpack(Lnn) c_1) (VSPLAT (Lnn X N)) ~> (VCONST V128 c)
  -- if c = $inv_lanes_(Lnn X N, $packnum_(Lnn, c_1)^N)


rule Step_pure/vextract_lane-num:
  (VCONST V128 c_1) (VEXTRACT_LANE (nt X N) i) ~> (CONST nt c_2)
  -- if c_2 = $lanes_(nt X N, c_1)[i]

;; TODO : fshape
rule Step_pure/vextract_lane-pack:
  (VCONST V128 c_1) (VEXTRACT_LANE (pt X N) sx i) ~> (CONST I32 c_2)
  -- if c_2 = $extend__($psize(pt), 32, sx, $lanes_(pt X N, c_1)[i])


rule Step_pure/vreplace_lane:
  (VCONST V128 c_1) (CONST $unpack(Lnn) c_2) (VREPLACE_LANE (Lnn X N) i) ~> (VCONST V128 c)
  -- if c = $inv_lanes_(Lnn X N, $lanes_(Lnn X N, c_1)[[i] = $packnum_(Lnn, c_2)])


rule Step_pure/vextunop:
  (VCONST V128 c_1) (VEXTUNOP sh_1 sh_2 vextunop) ~> (VCONST V128 c)
  -- if $vextunop__(sh_1, sh_2, vextunop, c_1) = c


rule Step_pure/vextbinop:
  (VCONST V128 c_1) (VCONST V128 c_2) (VEXTBINOP sh_1 sh_2 vextbinop) ~> (VCONST V128 c)
  -- if $vextbinop__(sh_1, sh_2, vextbinop, c_1, c_2) = c


rule Step_pure/vnarrow:
  (VCONST V128 c_1) (VCONST V128 c_2) (VNARROW (Jnn_2 X N_2) (Jnn_1 X N_1) sx) ~> (VCONST V128 c)
  -- if ci_1* = $lanes_(Jnn_1 X N_1, c_1)
  -- if ci_2* = $lanes_(Jnn_1 X N_1, c_2)
  -- if cj_1* = $narrow__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci_1)*
  -- if cj_2* = $narrow__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci_2)*
  -- if c = $inv_lanes_(Jnn_2 X N_2, cj_1* cj_2*)


rule Step_pure/vcvtop-full:
  (VCONST V128 c_1) (VCVTOP (Lnn_2 X M) (Lnn_1 X M) vcvtop) ~> (VCONST V128 c)
  -- if $halfop(vcvtop) = eps /\ $zeroop(vcvtop) = eps
  -- if ci* = $lanes_(Lnn_1 X M, c_1)
  -- if cj** = $setproduct_(lane_(Lnn_2), $vcvtop__(Lnn_1 X M, Lnn_2 X M, vcvtop, ci)*)
  -- if c <- $inv_lanes_(Lnn_2 X M, cj*)*

rule Step_pure/vcvtop-half:
  (VCONST V128 c_1) (VCVTOP (Lnn_2 X M_2) (Lnn_1 X M_1) vcvtop) ~> (VCONST V128 c)
  -- if $halfop(vcvtop) = half
  -- if ci* = $lanes_(Lnn_1 X M_1, c_1)[$half(half, 0, M_2) : M_2]
  -- if cj** = $setproduct_(lane_(Lnn_2), $vcvtop__(Lnn_1 X M_1, Lnn_2 X M_2, vcvtop, ci)*)
  -- if c <- $inv_lanes_(Lnn_2 X M_2, cj*)*

rule Step_pure/vcvtop-zero:
  (VCONST V128 c_1) (VCVTOP (nt_2 X M_2) (nt_1 X M_1) vcvtop) ~> (VCONST V128 c)
  -- if $zeroop(vcvtop) = ZERO
  -- if ci* = $lanes_(nt_1 X M_1, c_1)
  -- if cj** = $setproduct_(lane_(nt_2), ($vcvtop__(nt_1 X M_1, nt_2 X M_2, vcvtop, ci)* ++ [$zero(nt_2)]^M_1))
  -- if c <- $inv_lanes_(nt_2 X M_2, cj*)*


;; Local instructions

rule Step_read/local.get:
  z; (LOCAL.GET x)  ~>  $local(z, x)

rule Step/local.set:
  z; val (LOCAL.SET x)  ~>  $with_local(z, x, val); eps

rule Step_pure/local.tee:
  val (LOCAL.TEE x)  ~>  val val (LOCAL.SET x)


;; Global instructions

rule Step_read/global.get:
  z; (GLOBAL.GET x)  ~>  $global(z, x).VALUE

rule Step/global.set:
  z; val (GLOBAL.SET x)  ~>  $with_global(z, x, val); eps


;; Table instructions

rule Step_read/table.get-trap:
  z; (CONST I32 i) (TABLE.GET x)  ~>  TRAP
  -- if i >= |$table(z, x).REFS|

rule Step_read/table.get-val:
  z; (CONST I32 i) (TABLE.GET x)  ~>  $table(z,x).REFS[i]
  -- if i < |$table(z, x).REFS|

rule Step/table.set-trap:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  z; TRAP
  -- if i >= |$table(z, x).REFS|

rule Step/table.set-val:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  $with_table(z, x, i, ref); eps
  -- if i < |$table(z, x).REFS|


rule Step_read/table.size:
  z; (TABLE.SIZE x)  ~>  (CONST I32 n)
  -- if |$table(z, x).REFS| = n  ;; TODO: inline this


rule Step/table.grow-succeed:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  $with_tableinst(z, x, ti); (CONST I32 $(|$table(z, x).REFS|))
  -- if $growtable($table(z, x), n, ref) = ti

rule Step/table.grow-fail:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  z; (CONST I32 $inv_signed_(32, $(-1)))


rule Step_read/table.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  TRAP
  -- if $(i + n) > |$table(z, x).REFS|

rule Step_read/table.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>
    (CONST I32 i) val (TABLE.SET x)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (TABLE.FILL x)
  -- otherwise


rule Step_read/table.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  TRAP
  -- if $(i + n) > |$table(z, y).REFS| \/ $(j + n) > |$table(z, x).REFS|

rule Step_read/table.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 j) (CONST I32 i) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise
  -- if j <= i

rule Step_read/table.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise


rule Step_read/table.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  TRAP
  -- if $(i + n) > |$elem(z, y).REFS| \/ $(j + n) > |$table(z, x).REFS|

rule Step_read/table.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/table.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>
    (CONST I32 j) $elem(z,y).REFS[i] (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.INIT x y)
  -- otherwise


rule Step/elem.drop:
  z; (ELEM.DROP x)  ~>  $with_elem(z, x, eps); eps


;; Memory instructions

rule Step_read/load-num-trap:
  z; (CONST I32 i) (LOAD nt ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + $size(nt)/8 > |$mem(z, 0).BYTES|)

rule Step_read/load-num-val:
  z; (CONST I32 i) (LOAD nt ao)  ~>  (CONST nt c)
  -- if $nbytes_(nt, c) = $mem(z, 0).BYTES[i + ao.OFFSET : $size(nt)/8]

rule Step_read/load-pack-trap:
  z; (CONST I32 i) (LOAD Inn (n _ sx) ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + n/8 > |$mem(z, 0).BYTES|)

rule Step_read/load-pack-val:
  z; (CONST I32 i) (LOAD Inn (n _ sx) ao)  ~>  (CONST Inn $extend__(n, $size(Inn), sx, c))
  -- if $ibytes_(n, c) = $mem(z, 0).BYTES[i + ao.OFFSET : n/8]

rule Step_read/vload-oob:
  z; (CONST I32 i) (VLOAD V128 ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + $size(V128)/8 > |$mem(z, 0).BYTES|)

rule Step_read/vload-val:
  z; (CONST I32 i) (VLOAD V128 ao)  ~>  (VCONST V128 c)
  -- if $vbytes_(V128, c) = $mem(z, 0).BYTES[i + ao.OFFSET : $size(V128)/8]


rule Step_read/vload-shape-oob:
  z; (CONST I32 i) (VLOAD V128 (SHAPE M X N _ sx) ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + M * N/8) > |$mem(z, 0).BYTES|

rule Step_read/vload-shape-val:
  z; (CONST I32 i) (VLOAD V128 (SHAPE M X N _ sx) ao)  ~>  (VCONST V128 c)
  -- (if $ibytes_(M, j) = $mem(z, 0).BYTES[i + ao.OFFSET + k * M/8 : M/8])^(k<N)
  -- if $jsize(Jnn) = $(M * 2)  ;; TODO: relate implicitly
  -- if c = $inv_lanes_(Jnn X N, $extend__(M, $jsize(Jnn), sx, j)^N)


rule Step_read/vload-splat-oob:
  z; (CONST I32 i) (VLOAD V128 (SPLAT N) ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + N/8) > |$mem(z, 0).BYTES|

rule Step_read/vload-splat-val:
  z; (CONST I32 i) (VLOAD V128 (SPLAT N) ao)  ~>  (VCONST V128 c)
  -- if $ibytes_(N, j) = $mem(z, 0).BYTES[i + ao.OFFSET : N/8]
  -- if N = $jsize(Jnn)  ;; TODO: relate implicitly
  -- if M = $(128/N)
  -- if c = $inv_lanes_(Jnn X M, j^M)


rule Step_read/vload-zero-oob:
  z; (CONST I32 i) (VLOAD V128 (ZERO N) ao)  ~>  TRAP
  -- if $(i + ao.OFFSET + N/8) > |$mem(z, 0).BYTES|

rule Step_read/vload-zero-val:
  z; (CONST I32 i) (VLOAD V128 (ZERO N) ao)  ~>  (VCONST V128 c)
  -- if $ibytes_(N, j) = $mem(z, 0).BYTES[i + ao.OFFSET : N/8]
  -- if c = $extend__(N, 128, U, j)


rule Step_read/vload_lane-oob:
  z; (CONST I32 i) (VCONST V128 c_1) (VLOAD_LANE V128 N ao j)  ~>  TRAP
  -- if $(i + ao.OFFSET + N/8 > |$mem(z, 0).BYTES|)

rule Step_read/vload_lane-val:
  z; (CONST I32 i) (VCONST V128 c_1) (VLOAD_LANE V128 N ao j)  ~>  (VCONST V128 c)
  -- if $ibytes_(N, k) = $mem(z, 0).BYTES[i + ao.OFFSET : N/8]
  -- if N = $jsize(Jnn)  ;; TODO: relate implicitly
  -- if M = $(128/N)
  -- if c = $inv_lanes_(Jnn X M, $lanes_(Jnn X M, c_1)[[j] = k])


rule Step/store-num-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt ao)  ~>  z; TRAP
  -- if $(i + ao.OFFSET + $size(nt)/8) > |$mem(z, 0).BYTES|

rule Step/store-num-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt ao)  ~>  $with_mem(z, 0, $(i + ao.OFFSET), $($size(nt)/8), b*); eps
  -- if b* = $nbytes_(nt, c)

rule Step/store-pack-trap:
  z; (CONST I32 i) (CONST Inn c) (STORE Inn n ao)  ~>  z; TRAP
  -- if $(i + ao.OFFSET + n/8) > |$mem(z, 0).BYTES|

rule Step/store-pack-val:
  z; (CONST I32 i) (CONST Inn c) (STORE Inn n ao)  ~>  $with_mem(z, 0, $(i + ao.OFFSET), $(n/8), b*); eps
  -- if b* = $ibytes_(n, $wrap__($size(Inn), n, c))

rule Step/vstore-oob:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE V128 ao)  ~>  z; TRAP
  -- if $(i + ao.OFFSET + $size(V128)/8) > |$mem(z, 0).BYTES|

rule Step/vstore-val:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE V128 ao)  ~>  $with_mem(z, 0, $(i + ao.OFFSET), $($size(V128)/8), b*); eps
  -- if b* = $vbytes_(V128, c)


rule Step/vstore_lane-oob:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE_LANE V128 N ao j)  ~>  z; TRAP
  -- if $(i + ao.OFFSET + N) > |$mem(z, 0).BYTES|

rule Step/vstore_lane-val:
  z; (CONST I32 i) (VCONST V128 c) (VSTORE_LANE V128 N ao j)  ~>  $with_mem(z, 0, $(i + ao.OFFSET), $(N/8), b*); eps
  -- if N = $jsize(Jnn)  ;; TODO: relate implicitly
  -- if M = $(128/N)
  -- if b* = $ibytes_(N, $lanes_(Jnn X M, c)[j])


rule Step_read/memory.size:
  z; (MEMORY.SIZE)  ~>  (CONST I32 n)
  -- if $(n * 64 * $Ki) = |$mem(z, 0).BYTES|


rule Step/memory.grow-succeed:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  $with_meminst(z, 0, mi); (CONST I32 $(|$mem(z, 0).BYTES| / (64 * $Ki)))
  -- if $growmemory($mem(z, 0), n) = mi

rule Step/memory.grow-fail:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  z; (CONST I32 $inv_signed_(32, $(-1)))


rule Step_read/memory.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).BYTES|

rule Step_read/memory.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>
    (CONST I32 i) val (STORE I32 8 $memarg0)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (MEMORY.FILL)
  -- otherwise


rule Step_read/memory.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).BYTES| \/ $(j + n) > |$mem(z, 0).BYTES|

rule Step_read/memory.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 j) (CONST I32 i) (LOAD I32 (8 _ U) $memarg0) (STORE I32 8 $memarg0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise
  -- if j <= i

rule Step_read/memory.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (LOAD I32 (8 _ U) $memarg0) (STORE I32 8 $memarg0)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise


rule Step_read/memory.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  TRAP
  -- if $(i + n) > |$data(z, x).BYTES| \/ $(j + n) > |$mem(z, 0).BYTES|

rule Step_read/memory.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  eps
  -- otherwise
  -- if n = 0

rule Step_read/memory.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>
    (CONST I32 j) (CONST I32 $data(z,x).BYTES[i]) (STORE I32 8 $memarg0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.INIT x)
  -- otherwise


rule Step/data.drop:
  z; (DATA.DROP x)  ~>  $with_data(z, x, eps); eps
