;;
;; Numerics
;;

;; Conversions

def $s33_to_u32(s33) : u32  hint(show %)

def $bool(bool) : nat
def $bool(false) = 0
def $bool(true) = 1

def $truncz(rat) : int
def $truncz hint(builtin)
;;def $trunc(+-q) = +-n  -- if n <- nat /\ $(q - 1) < n <= q


;; Signed numbers

def $signed_(N, nat) : int hint(inverse $inv_signed_)
def $signed_(N, i) = i           -- if $(i < 2^(N-1))
def $signed_(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $inv_signed_(N, int) : nat      hint(show $signed_(%)^(-1)#((%)))
def $inv_signed_(N, i) = i          -- if $(0 <= i < 2^(N-1))
def $inv_signed_(N, i) = $(i + 2^N) -- if $(-2^(N-1) <= i < 0)


;; Saturation

def $sat_u_(N, int) : nat           hint(show $sat__u_(%,%))
def $sat_u_(N, i) = 0               -- if i < 0
def $sat_u_(N, i) = $(2^N - 1)      -- if i > $(2^N - 1)
def $sat_u_(N, i) = i               -- otherwise

def $sat_s_(N, int) : int           hint(show $sat__s_(%,%))
def $sat_s_(N, i) = $(-2^(N-1))     -- if i < $(-2^(N-1))
def $sat_s_(N, i) = $(2^(N-1) - 1)  -- if i > $(2^(N-1) - 1)
def $sat_s_(N, i) = i               -- otherwise


;; TODO

def $unop_(numtype, unop_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#$_(%1)#((%3)))
def $binop_(numtype, binop_(numtype), num_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#$_(%1)#(%3, %4))
def $testop_(numtype, testop_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#$_(%1)#((%3)))
def $relop_(numtype, relop_(numtype), num_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#$_(%1)#(%3, %4))
def $cvtop__(numtype_1, numtype_2, cvtop, num_(numtype_1)) : num_(numtype_2)*
    hint(show %3#$__(%1,%2)#((%4)))

def $wrap__(M, N, iN(M)) : iN(N)
def $extend__(M, N, sx, iN(M)) : iN(N)               hint(show $extend__(%,%)^(%)#((%)))
def $trunc__(M, N, sx, fN(M)) : iN(N)?               hint(show $trunc__(%,%)^(%)#((%)))
def $trunc_sat__(M, N, sx, fN(M)) : iN(N)?           hint(show $trunc__sat__(%,%)^(%)#((%)))
def $demote__(M, N, fN(M)) : fN(N)*
def $promote__(M, N, fN(M)) : fN(N)*
def $convert__(M, N, sx, iN(M)) : fN(N)              hint(show $convert__(%,%)^(%)#((%)))
def $narrow__(M, N, sx, iN(M)) : iN(N)               hint(show $narrow__(%,%)^(%)#(%))
def $reinterpret__(numtype_1, numtype_2, num_(numtype_1)) : num_(numtype_2)

;; TODO(3, rossberg): implement all numerics internally
def $wrap__        hint(builtin)
def $extend__      hint(builtin)
def $trunc__       hint(builtin)
def $trunc_sat__   hint(builtin)
def $demote__      hint(builtin)
def $promote__     hint(builtin)
def $convert__     hint(builtin)
def $narrow__      hint(builtin)
def $reinterpret__ hint(builtin)

def $ibits_(N, iN(N)) : bit*                      hint(show $bits_(I#%,%))  hint(inverse $inv_ibits_)
def $fbits_(N, fN(N)) : bit*                      hint(show $bits_(F#%,%))  hint(inverse $inv_fbits_)
def $ibytes_(N, iN(N)) : byte*                    hint(show $bytes_(I#%,%)) hint(inverse $inv_ibytes_)
def $fbytes_(N, fN(N)) : byte*                    hint(show $bytes_(F#%,%)) hint(inverse $inv_fbytes_)
def $nbytes_(numtype, num_(numtype)) : byte*      hint(show $bytes_(%,%))   hint(inverse $inv_nbytes_)
def $vbytes_(vectype, vec_(vectype)) : byte*      hint(show $bytes_(%,%))   hint(inverse $inv_vbytes_)

def $inv_ibits_(N, bit*) : iN(N)                  hint(show $bits_(I#%)^$(-1)#((%)))
def $inv_fbits_(N, bit*) : fN(N)                  hint(show $bits_(F#%)^$(-1)#((%)))
def $inv_ibytes_(N, byte*) : iN(N)                hint(show $bytes_(I#%)^$(-1)#((%)))
def $inv_fbytes_(N, byte*) : fN(N)                hint(show $bytes_(F#%)^$(-1)#((%)))
def $inv_nbytes_(numtype, byte*) : num_(numtype)  hint(show $bytes_(%)^$(-1)#((%)))
def $inv_vbytes_(vectype, byte*) : vec_(vectype)  hint(show $bytes_(%)^$(-1)#((%)))

def $ibits_  hint(builtin)
def $fbits_  hint(builtin)
def $ibytes_ hint(builtin)
def $fbytes_ hint(builtin)
def $nbytes_ hint(builtin)
def $vbytes_ hint(builtin)

def $inv_ibits_  hint(builtin)
def $inv_fbits_  hint(builtin)
def $inv_ibytes_ hint(builtin)
def $inv_fbytes_ hint(builtin)
def $inv_nbytes_ hint(builtin)
def $inv_vbytes_ hint(builtin)


def $iadd_(N, iN(N), iN(N)) : iN(N)
def $isub_(N, iN(N), iN(N)) : iN(N)
def $imul_(N, iN(N), iN(N)) : iN(N)
def $idiv_(N, sx, iN(N), iN(N)) : iN(N)? hint(show $idiv_(%)^(%)#((%,%)))
def $irem_(N, sx, iN(N), iN(N)) : iN(N)? hint(show $irem_(%)^(%)#((%,%)))
def $inot_(N, iN(N)) : iN(N)
def $irev_(N, iN(N)) : iN(N)
def $iand_(N, iN(N), iN(N)) : iN(N)
def $iandnot_(N, iN(N), iN(N)) : iN(N)
def $ior_(N, iN(N), iN(N)) : iN(N)
def $ixor_(N, iN(N), iN(N)) : iN(N)
def $ishl_(N, iN(N), u32) : iN(N)
def $ishr_(N, sx, iN(N), u32) : iN(N)    hint(show $ishr_(%)^(%)#((%,%)))
def $irotl_(N, iN(N), iN(N)) : iN(N)
def $irotr_(N, iN(N), iN(N)) : iN(N)
def $iclz_(N, iN(N)) : iN(N)
def $ictz_(N, iN(N)) : iN(N)
def $ipopcnt_(N, iN(N)) : iN(N)
def $ieqz_(N, iN(N)) : u32
def $inez_(N, iN(N)) : u32
def $ieq_(N, iN(N), iN(N)) : u32
def $ine_(N, iN(N), iN(N)) : u32
def $ilt_(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_(%)^(%)#((%,%)))
def $igt_(N, sx, iN(N), iN(N)) : u32     hint(show $igt_(%)^(%)#((%,%)))
def $ile_(N, sx, iN(N), iN(N)) : u32     hint(show $ile_(%)^(%)#((%,%)))
def $ige_(N, sx, iN(N), iN(N)) : u32     hint(show $ige_(%)^(%)#((%,%)))
def $ibitselect_(N, iN(N), iN(N), iN(N)) : iN(N)
def $iabs_(N, iN(N)) : iN(N)
def $ineg_(N, iN(N)) : iN(N)
def $imin_(N, sx, iN(N), iN(N)) : iN(N)         hint(show $imin_(%)^(%)%((%,%)))
def $imax_(N, sx, iN(N), iN(N)) : iN(N)         hint(show $imax_(%)^(%)%((%,%)))
def $iadd_sat_(N, sx, iN(N), iN(N)) : iN(N)     hint(show $iadd__sat_(%)^(%)#((%,%)))
def $isub_sat_(N, sx, iN(N), iN(N)) : iN(N)     hint(show $isub__sat_(%)^(%)#((%,%)))
def $iavgr_(N, sx, iN(N), iN(N)) : iN(N)        hint(show $iavgr_(%)^(%)#((%,%)))
def $iq15mulr_sat_(N, sx, iN(N), iN(N)) : iN(N) hint(show $iq15mulr__sat_(%)^(%)#((%,%)))

def $iadd_(N, i_1, i_2) = $((i_1 + i_2) \ 2^N)
def $isub_(N, i_1, i_2) = $((2^N + i_1 - i_2) \ 2^N)
def $imul_(N, i_1, i_2) = $((i_1 * i_2) \ 2^N)

def $idiv_(N, U, i_1, 0)   = eps
def $idiv_(N, U, i_1, i_2) = $truncz($(i_1 / i_2))
def $idiv_(N, S, i_1, 0)   = eps
def $idiv_(N, S, i_1, i_2) = eps  -- if $($signed_(N, i_1) / $signed_(N, i_2)) = $rat$(2^(N-1))
def $idiv_(N, S, i_1, i_2) = $inv_signed_(N, $truncz($($signed_(N, i_1) / $signed_(N, i_2))))

def $irem_(N, U, i_1, 0)   = eps
def $irem_(N, U, i_1, i_2) = $(i_1 - i_2 * $truncz($(i_1 / i_2)))
def $irem_(N, S, i_1, 0)   = eps
def $irem_(N, S, i_1, i_2) = $inv_signed_(N, $(j_1 - j_2 * $truncz($(j_1 / j_2))))
                             -- if j_1 = $signed_(N, i_1) /\ j_2 = $signed_(N, i_2)

def $inot_ hint(builtin)
def $irev_ hint(builtin)
def $iand_ hint(builtin)
def $iandnot_ hint(builtin)
def $ior_  hint(builtin)
def $ixor_ hint(builtin)
def $ishl_ hint(builtin)
def $ishr_ hint(builtin)
def $irotl_ hint(builtin)
def $irotr_ hint(builtin)
def $iclz_  hint(builtin)
def $ictz_  hint(builtin)
def $ipopcnt_ hint(builtin)

def $ieqz_(N, i_1) = $bool(i_1 = 0)
def $inez_(N, i_1) = $bool(i_1 =/= 0)

def $ieq_(N, i_1, i_2) = $bool(i_1 = i_2)
def $ine_(N, i_1, i_2) = $bool(i_1 =/= i_2)

def $ilt_(N, U, i_1, i_2) = $bool(i_1 < i_2)
def $ilt_(N, S, i_1, i_2) = $bool($signed_(N, i_1) < $signed_(N, i_2))

def $igt_(N, U, i_1, i_2) = $bool(i_1 > i_2)
def $igt_(N, S, i_1, i_2) = $bool($signed_(N, i_1) > $signed_(N, i_2))

def $ile_(N, U, i_1, i_2) = $bool(i_1 <= i_2)
def $ile_(N, S, i_1, i_2) = $bool($signed_(N, i_1) <= $signed_(N, i_2))

def $ige_(N, U, i_1, i_2) = $bool(i_1 >= i_2)
def $ige_(N, S, i_1, i_2) = $bool($signed_(N, i_1) >= $signed_(N, i_2))

def $ibitselect_ hint(builtin)

def $iabs_(N, i_1) = i_1             -- if $signed_(N, i_1) >= 0
def $iabs_(N, i_1) = $ineg_(N, i_1)  -- otherwise

def $imin_(N, U, i_1, i_2) = i_1  -- if i_1 <= i_2
def $imin_(N, U, i_1, i_2) = i_2  -- if i_1 > i_2
def $imin_(N, S, i_1, i_2) = i_1  -- if $signed_(N, i_1) <= $signed_(N, i_2)
def $imin_(N, S, i_1, i_2) = i_2  -- otherwise

def $imax_(N, U, i_1, i_2) = i_1  -- if i_1 >= i_2
def $imax_(N, U, i_1, i_2) = i_2  -- if i_1 < i_2
def $imax_(N, S, i_1, i_2) = i_1  -- if $signed_(N, i_1) >= $signed_(N, i_2)
def $imax_(N, S, i_1, i_2) = i_2  -- otherwise

def $ineg_(N, i_1) = $((2^N - i_1) \ 2^N)

def $iadd_sat_(N, U, i_1, i_2) = $sat_u_(N, $(i_1 + i_2))
def $iadd_sat_(N, S, i_1, i_2) = $inv_signed_(N, $sat_s_(N, $($signed_(N, i_1) + $signed_(N, i_2))))

def $isub_sat_(N, U, i_1, i_2) = $sat_u_(N, $(i_1 - i_2))
def $isub_sat_(N, S, i_1, i_2) = $inv_signed_(N, $sat_s_(N, $($signed_(N, i_1) - $signed_(N, i_2))))

def $iavgr_ hint(builtin)
def $iq15mulr_sat_ hint(builtin)

def $fadd_(N, fN(N), fN(N)) : fN(N)*
def $fsub_(N, fN(N), fN(N)) : fN(N)*
def $fmul_(N, fN(N), fN(N)) : fN(N)*
def $fdiv_(N, fN(N), fN(N)) : fN(N)*
def $fmin_(N, fN(N), fN(N)) : fN(N)*
def $fmax_(N, fN(N), fN(N)) : fN(N)*
def $fpmin_(N, fN(N), fN(N)) : fN(N)*
def $fpmax_(N, fN(N), fN(N)) : fN(N)*
def $fcopysign_(N, fN(N), fN(N)) : fN(N)*
def $fabs_(N, fN(N)) : fN(N)*
def $fneg_(N, fN(N)) : fN(N)*
def $fsqrt_(N, fN(N)) : fN(N)*
def $fceil_(N, fN(N)) : fN(N)*
def $ffloor_(N, fN(N)) : fN(N)*
def $ftrunc_(N, fN(N)) : fN(N)*
def $fnearest_(N, fN(N)) : fN(N)*
def $feq_(N, fN(N), fN(N)) : u32
def $fne_(N, fN(N), fN(N)) : u32
def $flt_(N, fN(N), fN(N)) : u32
def $fgt_(N, fN(N), fN(N)) : u32
def $fle_(N, fN(N), fN(N)) : u32
def $fge_(N, fN(N), fN(N)) : u32

def $fadd_  hint(builtin)
def $fsub_  hint(builtin)
def $fmul_  hint(builtin)
def $fdiv_  hint(builtin)
def $fmin_  hint(builtin)
def $fmax_  hint(builtin)
def $fpmin_ hint(builtin)
def $fpmax_ hint(builtin)

def $fcopysign_ hint(builtin)
def $fabs_      hint(builtin)
def $fneg_      hint(builtin)
def $fsqrt_     hint(builtin)
def $fceil_     hint(builtin)
def $ffloor_    hint(builtin)
def $ftrunc_    hint(builtin)
def $fnearest_  hint(builtin)

def $feq_ hint(builtin)
def $fne_ hint(builtin)
def $flt_ hint(builtin)
def $fgt_ hint(builtin)
def $fle_ hint(builtin)
def $fge_ hint(builtin)

def $binop_(Inn, ADD, iN_1, iN_2) = $iadd_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, SUB, iN_1, iN_2) = $isub_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, MUL, iN_1, iN_2) = $imul_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, DIV sx, iN_1, iN_2) = $list_(num_(Inn), $idiv_($sizenn(Inn), sx, iN_1, iN_2))
def $binop_(Inn, REM sx, iN_1, iN_2) = $list_(num_(Inn), $irem_($sizenn(Inn), sx, iN_1, iN_2))
def $binop_(Inn, AND, iN_1, iN_2) = $iand_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, OR, iN_1, iN_2) = $ior_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, XOR, iN_1, iN_2) = $ixor_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, SHL, iN_1, iN_2) = $ishl_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, SHR sx, iN_1, iN_2) = $ishr_($sizenn(Inn), sx, iN_1, iN_2)
def $binop_(Inn, ROTL, iN_1, iN_2) = $irotl_($sizenn(Inn), iN_1, iN_2)
def $binop_(Inn, ROTR, iN_1, iN_2) = $irotr_($sizenn(Inn), iN_1, iN_2)
def $unop_(Inn, CLZ, iN) = $iclz_($sizenn(Inn), iN)
def $unop_(Inn, CTZ, iN) = $ictz_($sizenn(Inn), iN)
def $unop_(Inn, POPCNT, iN) = $ipopcnt_($sizenn(Inn), iN)
def $unop_(Inn, EXTEND M, iN) = $extend__(M, $sizenn(Inn), S, $wrap__($sizenn(Inn), M, iN))
def $testop_(Inn, EQZ, iN) = $ieqz_($sizenn(Inn), iN)
def $relop_(Inn, EQ, iN_1, iN_2) = $ieq_($sizenn(Inn), iN_1, iN_2)
def $relop_(Inn, NE, iN_1, iN_2) = $ine_($sizenn(Inn), iN_1, iN_2)
def $relop_(Inn, LT sx, iN_1, iN_2) = $ilt_($sizenn(Inn), sx, iN_1, iN_2)
def $relop_(Inn, GT sx, iN_1, iN_2) = $igt_($sizenn(Inn), sx, iN_1, iN_2)
def $relop_(Inn, LE sx, iN_1, iN_2) = $ile_($sizenn(Inn), sx, iN_1, iN_2)
def $relop_(Inn, GE sx, iN_1, iN_2) = $ige_($sizenn(Inn), sx, iN_1, iN_2)

def $binop_(Fnn, ADD, fN_1, fN_2) = $fadd_($sizenn(Fnn), fN_1, fN_2)
def $binop_(Fnn, SUB, fN_1, fN_2) = $fsub_($sizenn(Fnn), fN_1, fN_2)
def $binop_(Fnn, MUL, fN_1, fN_2) = $fmul_($sizenn(Fnn), fN_1, fN_2)
def $binop_(Fnn, DIV, fN_1, fN_2) = $fdiv_($sizenn(Fnn), fN_1, fN_2)
def $binop_(Fnn, MIN, fN_1, fN_2) = $fmin_($sizenn(Fnn), fN_1, fN_2)
def $binop_(Fnn, MAX, fN_1, fN_2) = $fmax_($sizenn(Fnn), fN_1, fN_2)
def $binop_(Fnn, COPYSIGN, fN_1, fN_2) = $fcopysign_($sizenn(Fnn), fN_1, fN_2)

def $unop_(Fnn, ABS, fN) = $fabs_($sizenn(Fnn), fN)
def $unop_(Fnn, NEG, fN) = $fneg_($sizenn(Fnn), fN)
def $unop_(Fnn, SQRT, fN) = $fsqrt_($sizenn(Fnn), fN)
def $unop_(Fnn, CEIL, fN) = $fceil_($sizenn(Fnn), fN)
def $unop_(Fnn, FLOOR, fN) = $ffloor_($sizenn(Fnn), fN)
def $unop_(Fnn, TRUNC, fN) = $ftrunc_($sizenn(Fnn), fN)
def $unop_(Fnn, NEAREST, fN) = $fnearest_($sizenn(Fnn), fN)

def $relop_(Fnn, EQ, fN_1, fN_2) = $feq_($sizenn(Fnn), fN_1, fN_2)
def $relop_(Fnn, NE, fN_1, fN_2) = $fne_($sizenn(Fnn), fN_1, fN_2)
def $relop_(Fnn, LT, fN_1, fN_2) = $flt_($sizenn(Fnn), fN_1, fN_2)
def $relop_(Fnn, GT, fN_1, fN_2) = $fgt_($sizenn(Fnn), fN_1, fN_2)
def $relop_(Fnn, LE, fN_1, fN_2) = $fle_($sizenn(Fnn), fN_1, fN_2)
def $relop_(Fnn, GE, fN_1, fN_2) = $fge_($sizenn(Fnn), fN_1, fN_2)

def $cvtop__(Inn_1, Inn_2, EXTEND sx, iN_1) = $extend__($sizenn1(Inn_1), $sizenn2(Inn_2), sx, iN_1)
def $cvtop__(Inn_1, Inn_2, WRAP, iN_1) = $wrap__($sizenn1(Inn_1), $sizenn2(Inn_2), iN_1)
def $cvtop__(Fnn_1, Inn_2, TRUNC sx, fN_1) = $list_(num_(Inn_2), $trunc__($sizenn1(Fnn_1), $sizenn2(Inn_2), sx, fN_1))
def $cvtop__(Fnn_1, Inn_2, TRUNC_SAT sx, fN_1) = $list_(num_(Inn_2), $trunc_sat__($sizenn1(Fnn_1), $sizenn2(Inn_2), sx, fN_1))
def $cvtop__(Inn_1, Fnn_2, CONVERT sx, iN_1) = $convert__($sizenn1(Inn_1), $sizenn2(Fnn_2), sx, iN_1)
def $cvtop__(Fnn_1, Fnn_2, PROMOTE, fN_1) = $promote__($sizenn1(Fnn_1), $sizenn2(Fnn_2), fN_1)
def $cvtop__(Fnn_1, Fnn_2, DEMOTE, fN_1) = $demote__($sizenn1(Fnn_1), $sizenn2(Fnn_2), fN_1)
def $cvtop__(Inn_1, Fnn_2, REINTERPRET, iN_1) = $reinterpret__(Inn_1, Fnn_2, iN_1) -- if $size(Inn_1) = $size(Fnn_2)
def $cvtop__(Fnn_1, Inn_2, REINTERPRET, fN_1) = $reinterpret__(Fnn_1, Inn_2, fN_1) -- if $size(Fnn_1) = $size(Inn_2)


;; Packed values

def $packnum_(lanetype, num_($unpack(lanetype))) : lane_(lanetype)
    hint(show $pack_(%,%))
def $packnum_(numtype, c) = c
def $packnum_(packtype, c) = $wrap__($size($unpack(packtype)), $psize(packtype), c)

def $unpacknum_(lanetype, lane_(lanetype)) : num_($unpack(lanetype))
    hint(show $unpack_(%,%))
def $unpacknum_(numtype, c) = c
def $unpacknum_(packtype, c) = $extend__($psize(packtype), $size($unpack(packtype)), U, c)


;; Vectors

def $lanes_(shape, vec_(V128)) : lane_($lanetype(shape))* hint(inverse $inv_lanes_)
def $lanes_ hint(builtin)

def $inv_lanes_(shape, lane_($lanetype(shape))*) : vec_(V128)
    hint(show $lanes^(-1)#_%#(%,%))
def $inv_lanes_ hint(builtin)

def $zeroop(vcvtop) : zero?
def $zeroop(EXTEND half sx) = eps
def $zeroop(CONVERT half? sx) = eps
def $zeroop(TRUNC_SAT sx zero?) = zero?
def $zeroop(DEMOTE zero) = zero
def $zeroop(PROMOTE LOW) = eps

def $halfop(vcvtop) : half?
def $halfop(EXTEND half sx) = half
def $halfop(CONVERT half? sx) = half?
def $halfop(TRUNC_SAT sx zero?) = eps
def $halfop(DEMOTE zero) = eps
def $halfop(PROMOTE LOW) = LOW

def $half(half, nat, nat) : nat
def $half(LOW, i, j) = i
def $half(HIGH, i, j) = j

;; TODO: return lists for nondeterminism
def $vvunop_(vectype, vvunop, vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1,%3))
def $vvbinop_(vectype, vvbinop, vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1,%3,%4))
def $vvternop_(vectype, vvternop, vec_(vectype), vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1,%3,%4,%5))

def $vvunop_(V128, NOT, v128) = $inot_($size(V128), v128)
def $vvbinop_(V128, AND, v128_1, v128_2) = $iand_($size(V128), v128_1, v128_2)
def $vvbinop_(V128, ANDNOT, v128_1, v128_2) = $iandnot_($size(V128), v128_1, v128_2)
def $vvbinop_(V128, OR, v128_1, v128_2) = $ior_($size(V128), v128_1, v128_2)
def $vvbinop_(V128, XOR, v128_1, v128_2) = $ixor_($size(V128), v128_1, v128_2)
def $vvternop_(V128, BITSELECT, v128_1, v128_2, v128_3) = $ibitselect_($size(V128), v128_1, v128_2, v128_3)

;; TODO: rename these to mapunop etc?
def $vunop_(shape, vunop_(shape), vec_(V128)) : vec_(V128)*
    hint(show %2#$_(%1)#((%3)))
def $vbinop_(shape, vbinop_(shape), vec_(V128), vec_(V128)) : vec_(V128)*
    hint(show %2#$_(%1)#(%3, %4))
def $vrelop_(shape, vrelop_(shape), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %2#$_(%1)#(%3, %4))
def $vcvtop__(shape_1, shape_2, vcvtop, lane_($lanetype(shape_1))) : lane_($lanetype(shape_2))*
    hint(show %3#$__(%1,%2)^(%4)#((%5)))

def $vunop_(Jnn X M, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if v128 = $inv_lanes_(Jnn X M, $iabs_($lsizenn(Jnn), lane_1)*)
def $vunop_(Jnn X M, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if v128 = $inv_lanes_(Jnn X M, $ineg_($lsizenn(Jnn), lane_1)*)
def $vunop_(Jnn X M, POPCNT, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if v128 = $inv_lanes_(Jnn X M, $ipopcnt_($lsizenn(Jnn), lane_1)*)

def $vbinop_(Jnn X M, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $iadd_($lsizenn(Jnn), lane_1, lane_2)*)
def $vbinop_(Jnn X M, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $isub_($lsizenn(Jnn), lane_1, lane_2)*)
def $vbinop_(Jnn X M, MIN sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $imin_($lsizenn(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X M, MAX sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $imax_($lsizenn(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X M, ADD_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $iadd_sat_($lsizenn(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X M, SUB_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $isub_sat_($lsizenn(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X M, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $imul_($lsizenn(Jnn), lane_1, lane_2)*)
def $vbinop_(Jnn X M, AVGR U, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $iavgr_($lsizenn(Jnn), U, lane_1, lane_2)*)
def $vbinop_(Jnn X M, Q15MULR_SAT S, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if v128 = $inv_lanes_(Jnn X M, $iq15mulr_sat_($lsizenn(Jnn), S, lane_1, lane_2)*)

def $vrelop_(Jnn X M, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if lane_3* = $extend__(1, $lsizenn(Jnn), S, $ieq_($lsizenn(Jnn), lane_1, lane_2))*
    -- if v128 = $inv_lanes_(Jnn X M, lane_3*)
def $vrelop_(Jnn X M, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if lane_3* = $extend__(1, $lsizenn(Jnn), S, $ine_($lsizenn(Jnn), lane_1, lane_2))*
    -- if v128 = $inv_lanes_(Jnn X M, lane_3*)
def $vrelop_(Jnn X M, LT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if lane_3* = $extend__(1, $lsizenn(Jnn), S, $ilt_($lsizenn(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $inv_lanes_(Jnn X M, lane_3*)
def $vrelop_(Jnn X M, GT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if lane_3* = $extend__(1, $lsizenn(Jnn), S, $igt_($lsizenn(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $inv_lanes_(Jnn X M, lane_3*)
def $vrelop_(Jnn X M, LE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if lane_3* = $extend__(1, $lsizenn(Jnn), S, $ile_($lsizenn(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $inv_lanes_(Jnn X M, lane_3*)
def $vrelop_(Jnn X M, GE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X M, v128_1)
    -- if lane_2* = $lanes_(Jnn X M, v128_2)
    -- if lane_3* = $extend__(1, $lsizenn(Jnn), S, $ige_($lsizenn(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $inv_lanes_(Jnn X M, lane_3*)

def $vunop_(Fnn X M, ABS, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $fabs_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vunop_(Fnn X M, NEG, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $fneg_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vunop_(Fnn X M, SQRT, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $fsqrt_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vunop_(Fnn X M, CEIL, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $fceil_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vunop_(Fnn X M, FLOOR, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $ffloor_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vunop_(Fnn X M, TRUNC, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $ftrunc_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vunop_(Fnn X M, NEAREST, v128_1) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane** = $setproduct_(lane_(Fnn), $fnearest_($sizenn(Fnn), lane_1)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*

def $vbinop_(Fnn X M, ADD, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fadd_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, SUB, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fsub_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, MUL, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fmul_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, DIV, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fdiv_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, MIN, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fmin_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, MAX, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fmax_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, PMIN, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fpmin_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*
def $vbinop_(Fnn X M, PMAX, v128_1, v128_2) = v128*
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane** = $setproduct_(lane_(Fnn), $fpmax_($sizenn(Fnn), lane_1, lane_2)*)
    -- if v128* = $inv_lanes_(Fnn X M, lane*)*

def $vrelop_(Fnn X M, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane_3* = $extend__(1, $sizenn(Fnn), S, $feq_($sizenn(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $inv_lanes_(Inn X M, lane_3*)
def $vrelop_(Fnn X M, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane_3* = $extend__(1, $sizenn(Fnn), S, $fne_($sizenn(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $inv_lanes_(Inn X M, lane_3*)
def $vrelop_(Fnn X M, LT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane_3* = $extend__(1, $sizenn(Fnn), S, $flt_($sizenn(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $inv_lanes_(Inn X M, lane_3*)
def $vrelop_(Fnn X M, GT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane_3* = $extend__(1, $sizenn(Fnn), S, $fgt_($sizenn(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $inv_lanes_(Inn X M, lane_3*)
def $vrelop_(Fnn X M, LE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane_3* = $extend__(1, $sizenn(Fnn), S, $fle_($sizenn(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $inv_lanes_(Inn X M, lane_3*)
def $vrelop_(Fnn X M, GE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X M, v128_1)
    -- if lane_2* = $lanes_(Fnn X M, v128_2)
    -- if lane_3* = $extend__(1, $sizenn(Fnn), S, $fge_($sizenn(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $inv_lanes_(Inn X M, lane_3*)

def $vcvtop__(Jnn_1 X M_1, Jnn_2 X M_2, EXTEND half sx, iN_1) = iN_2
    -- if iN_2 = $extend__($lsizenn1(Jnn_1), $lsizenn2(Jnn_2), sx, iN_1)
def $vcvtop__(Jnn_1 X M_1, Fnn_2 X M_2, CONVERT half? sx, iN_1) = fN_2
    -- if fN_2 = $convert__($lsizenn1(Jnn_1), $lsizenn2(Fnn_2), sx, iN_1)
def $vcvtop__(Fnn_1 X M_1, Inn_2 X M_2, TRUNC_SAT sx zero?, fN_1) = $list_(lane_(Inn_2), iN_2?)
    -- if iN_2? = $trunc_sat__($lsizenn1(Fnn_1), $lsizenn2(Inn_2), sx, fN_1)
def $vcvtop__(Fnn_1 X M_1, Fnn_2 X M_2, DEMOTE ZERO, fN_1) = fN_2*
    -- if fN_2* = $demote__($lsizenn1(Fnn_1), $lsizenn2(Fnn_2), fN_1)
def $vcvtop__(Fnn_1 X M_1, Fnn_2 X M_2, PROMOTE LOW, fN_1) = fN_2*
    -- if fN_2* = $promote__($lsizenn1(Fnn_1), $lsizenn2(Fnn_2), fN_1)


def $vextunop__(ishape_1, ishape_2, vextunop_(ishape_1), vec_(V128)) : vec_(V128)
    hint(show %3#$_((%1,%2))^(%5)#((%6)))
def $vextbinop__(ishape_1, ishape_2, vextbinop_(ishape_1), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %3#$_((%1,%2))^(%5)#((%6,%7)))

def $vextunop__(Inn_1 X M_1, Inn_2 X M_2, EXTADD_PAIRWISE sx, c_1) = c
  -- var cj_1 : iN($lsize(Inn_1))
  -- var cj_2 : iN($lsize(Inn_1))
  -- if ci* = $lanes_(Inn_2 X M_2, c_1)
  -- if $concat_(iN($lsizenn1(Inn_1)), (cj_1 cj_2)*) = $extend__($lsizenn2(Inn_2), $lsizenn1(Inn_1), sx, ci)*
  -- if c = $inv_lanes_(Inn_1 X M_1, $iadd_($lsizenn1(Inn_1), cj_1, cj_2)*)

def $vextbinop__(Inn_1 X M_1, Inn_2 X M_2, EXTMUL half sx, c_1, c_2) = c
  -- if ci_1* = $lanes_(Inn_2 X M_2, c_1)[$half(half, 0, M_1) : M_1]
  -- if ci_2* = $lanes_(Inn_2 X M_2, c_2)[$half(half, 0, M_1) : M_1]
  -- if c = $inv_lanes_(Inn_1 X M_1, $imul_($lsizenn1(Inn_1), $extend__($lsizenn2(Inn_2), $lsizenn1(Inn_1), sx, ci_1), $extend__($lsizenn2(Inn_2), $lsizenn1(Inn_1), sx, ci_2))*)

def $vextbinop__(Inn_1 X M_1, Inn_2 X M_2, DOT S, c_1, c_2) = c
  -- var cj_1 : iN($lsize(Inn_1))
  -- var cj_2 : iN($lsize(Inn_1))
  -- if ci_1* = $lanes_(Inn_2 X M_2, c_1)
  -- if ci_2* = $lanes_(Inn_2 X M_2, c_2)
  -- if $concat_(iN($lsizenn1(Inn_1)), (cj_1 cj_2)*) = $imul_($lsizenn1(Inn_1), $extend__($lsizenn2(Inn_2), $lsizenn1(Inn_1), S, ci_1), $extend__($lsizenn2(Inn_2), $lsizenn1(Inn_1), S, ci_2))*
  -- if c = $inv_lanes_(Inn_1 X M_1, $iadd_($lsizenn1(Inn_1), cj_1, cj_2)*)

def $vshiftop_(ishape, vshiftop_(ishape), lane_($lanetype(ishape)), u32) : lane_($lanetype(ishape))
    hint(show %2#_%1#(%3, %4))

def $vshiftop_(Jnn X M, SHL, lane, n) = $ishl_($lsizenn(Jnn), lane, n)
def $vshiftop_(Jnn X M, SHR sx, lane, n) = $ishr_($lsizenn(Jnn), sx, lane, n)
