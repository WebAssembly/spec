;;
;; Validation of Instructions
;;

relation Instr_ok: context |- instr : instrtype     hint(name "T-instr")  hint(macro "%instr")
relation Instrs_ok: context |- instr* : instrtype   hint(name "T-instr*") hint(macro "%instrs")
relation Expr_ok: context |- expr : resulttype      hint(name "T-expr")   hint(macro "%expr")

relation Defaultable: |- valtype DEFAULTABLE  hint(show $default_(%2) =/= eps)
  hint(prose "A :ref:`default value <aux-default>` for %1 is defined")  ;; TODO(3, ?): avoid hardcoding reST

relation Nondefaultable: |- valtype NONDEFAULTABLE  hint(show $default_(%2) = eps)
  hint(prose "A :ref:`default value <aux-default>` for %1 is not defined")  ;; TODO(3, ?): avoid hardcoding reST


;; Parametric instructions

rule Instr_ok/nop:
  C |- NOP : eps -> eps

rule Instr_ok/unreachable:
  C |- UNREACHABLE : t_1* -> t_2*
  -- Instrtype_ok: C |- t_1* -> t_2* : OK

rule Instr_ok/drop:
  C |- DROP : t -> eps
  -- Valtype_ok: C |- t : OK

rule Instr_ok/select-expl:
  C |- SELECT t : t t I32 -> t
  -- Valtype_ok: C |- t : OK

rule Instr_ok/select-impl:
  C |- SELECT : t t I32 -> t
  -- Valtype_ok: C |- t : OK
  -- Valtype_sub: C |- t <: t'
  -- if t' = numtype \/ t' = vectype


;; Block instructions

relation Blocktype_ok: context |- blocktype : instrtype hint(name "K-block") hint(macro "%blocktype") hint(prosepp "as")

rule Blocktype_ok/valtype:
  C |- _RESULT valtype? : eps -> valtype?
  -- (Valtype_ok: C |- valtype : OK)?

rule Blocktype_ok/typeidx:
  C |- _IDX typeidx : t_1* -> t_2*
  -- Expand: C.TYPES[typeidx] ~~ FUNC t_1* -> t_2*


rule Instr_ok/block:
  C |- BLOCK bt instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- Instrs_ok: {LABELS (t_2*)} ++ C |- instr* : t_1* ->_(x*) t_2*

rule Instr_ok/loop:
  C |- LOOP bt instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- Instrs_ok: {LABELS (t_1*)} ++ C |- instr* : t_1* ->_(x*) t_2*

rule Instr_ok/if:
  C |- IF bt instr_1* ELSE instr_2* : t_1* I32 -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- Instrs_ok: {LABELS (t_2*)} ++ C |- instr_1* : t_1* ->_(x_1*) t_2*
  -- Instrs_ok: {LABELS (t_2*)} ++ C |- instr_2* : t_1* ->_(x_2*) t_2*


;; Branch instructions

rule Instr_ok/br:
  C |- BR l : t_1* t* -> t_2*
  -- if C.LABELS[l] = t*
  -- Instrtype_ok: C |- t_1* -> t_2* : OK

rule Instr_ok/br_if:
  C |- BR_IF l : t* I32 -> t*
  -- if C.LABELS[l] = t*

rule Instr_ok/br_table:
  C |- BR_TABLE l* l' : t_1* t* I32 -> t_2*
  -- (Resulttype_sub: C |- t* <: C.LABELS[l])*
  -- Resulttype_sub: C |- t* <: C.LABELS[l']
  -- Instrtype_ok: C |- t_1* t* I32 -> t_2* : OK

rule Instr_ok/br_on_null:
  C |- BR_ON_NULL l : t* (REF NULL ht) -> t* (REF ht)
  -- if C.LABELS[l] = t*
  -- Heaptype_ok: C |- ht : OK

rule Instr_ok/br_on_non_null:
  C |- BR_ON_NON_NULL l : t* (REF NULL ht) -> t*
  -- if C.LABELS[l] = t* (REF NULL? ht)

rule Instr_ok/br_on_cast:
  C |- BR_ON_CAST l rt_1 rt_2 : t* rt_1 -> t* ($diffrt(rt_1, rt_2))
  -- if C.LABELS[l] = t* rt
  -- Reftype_ok: C |- rt_1 : OK
  -- Reftype_ok: C |- rt_2 : OK
  -- Reftype_sub: C |- rt_2 <: rt_1
  -- Reftype_sub: C |- rt_2 <: rt

rule Instr_ok/br_on_cast_fail:
  C |- BR_ON_CAST_FAIL l rt_1 rt_2 : t* rt_1 -> t* rt_2
  -- if C.LABELS[l] = t* rt
  -- Reftype_ok: C |- rt_1 : OK
  -- Reftype_ok: C |- rt_2 : OK
  -- Reftype_sub: C |- rt_2 <: rt_1
  -- Reftype_sub: C |- $diffrt(rt_1, rt_2) <: rt


;; Function instructions

rule Instr_ok/call:
  C |- CALL x : t_1* -> t_2*
  -- Expand: C.FUNCS[x] ~~ FUNC t_1* -> t_2*

rule Instr_ok/call_ref:
  C |- CALL_REF (_IDX x) : t_1* (REF NULL (_IDX x)) -> t_2*
  -- Expand: C.TYPES[x] ~~ FUNC t_1* -> t_2*

rule Instr_ok/call_indirect:
  C |- CALL_INDIRECT x (_IDX y) : t_1* at -> t_2*
  -- if C.TABLES[x] = at lim rt
  -- Reftype_sub: C |- rt <: (REF NULL FUNC)
  -- Expand: C.TYPES[y] ~~ FUNC t_1* -> t_2*

rule Instr_ok/return:
  C |- RETURN : t_1* t* -> t_2*
  -- if C.RETURN = (t*)
  -- Instrtype_ok: C |- t_1* -> t_2* : OK

;; TODO(3, rossberg): enable t_2* <: C.RETURN
rule Instr_ok/return_call:
  C |- RETURN_CALL x : t_3* t_1* -> t_4*
  -- Expand: C.FUNCS[x] ~~ FUNC t_1* -> t_2*
  -- if C.RETURN = (t'_2*)
  -- Resulttype_sub: C |- t_2* <: t'_2*
  -- Instrtype_ok: C |- t_3* -> t_4* : OK

;; TODO(3, rossberg): enable t_2* <: C.RETURN
rule Instr_ok/return_call_ref:
  C |- RETURN_CALL_REF (_IDX x) : t_3* t_1* (REF NULL (_IDX x)) -> t_4*
  -- Expand: C.TYPES[x] ~~ FUNC t_1* -> t_2*
  -- if C.RETURN = (t'_2*)
  -- Resulttype_sub: C |- t_2* <: t'_2*
  -- Instrtype_ok: C |- t_3* -> t_4* : OK

;; TODO(3, rossberg): enable t_2* <: C.RETURN
rule Instr_ok/return_call_indirect:
  C |- RETURN_CALL_INDIRECT x (_IDX y) : t_3* t_1* at -> t_4*
  -- if C.TABLES[x] = at lim rt
  -- Reftype_sub: C |- rt <: (REF NULL FUNC)
  ----
  -- Expand: C.TYPES[y] ~~ FUNC t_1* -> t_2*
  -- if C.RETURN = (t'_2*)
  -- Resulttype_sub: C |- t_2* <: t'_2*
  -- Instrtype_ok: C |- t_3* -> t_4* : OK


;; Exception instructions

relation Catch_ok: context |- catch : OK hint(name "T") hint(macro "%catch")

rule Instr_ok/throw:
  C |- THROW x : t_1* t* -> t_2*
  -- Expand: $as_deftype(C.TAGS[x]) ~~ FUNC t* -> eps
  -- Instrtype_ok: C |- t_1* -> t_2* : OK

rule Instr_ok/throw_ref:
  C |- THROW_REF : t_1* (REF NULL EXN) -> t_2*
  -- Instrtype_ok: C |- t_1* -> t_2* : OK

rule Instr_ok/try_table:
  C |- TRY_TABLE bt catch* instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- Instrs_ok: {LABELS (t_2*)} ++ C |- instr* : t_1* ->_(x*) t_2*
  -- (Catch_ok: C |- catch : OK)*

rule Catch_ok/catch:
  C |- CATCH x l : OK
  -- Expand: $as_deftype(C.TAGS[x]) ~~ FUNC t* -> eps
  -- Resulttype_sub: C |- t* <: C.LABELS[l]

rule Catch_ok/catch_ref:
  C |- CATCH_REF x l : OK
  -- Expand: $as_deftype(C.TAGS[x]) ~~ FUNC t* -> eps
  -- Resulttype_sub: C |- t* (REF EXN) <: C.LABELS[l]

rule Catch_ok/catch_all:
  C |- CATCH_ALL l : OK
  -- Resulttype_sub: C |- eps <: C.LABELS[l]

rule Catch_ok/catch_all_ref:
  C |- CATCH_ALL_REF l : OK
  -- Resulttype_sub: C |- (REF EXN) <: C.LABELS[l]


;; Reference instructions

rule Instr_ok/ref.null:
  C |- REF.NULL ht : eps -> (REF NULL ht)
  -- Heaptype_ok: C |- ht : OK

rule Instr_ok/ref.func:
  C |- REF.FUNC x : eps -> (REF dt)
  -- if C.FUNCS[x] = dt
  -- if x <- C.REFS

rule Instr_ok/ref.i31:
  C |- REF.I31 : I32 -> (REF I31)

rule Instr_ok/ref.is_null:
  C |- REF.IS_NULL : (REF NULL ht) -> I32
  -- Heaptype_ok: C |- ht : OK

rule Instr_ok/ref.as_non_null:
  C |- REF.AS_NON_NULL : (REF NULL ht) -> (REF ht)
  -- Heaptype_ok: C |- ht : OK

rule Instr_ok/ref.eq:
  C |- REF.EQ : (REF NULL EQ) (REF NULL EQ) -> I32

rule Instr_ok/ref.test:
  C |- REF.TEST rt : rt' -> I32
  -- Reftype_ok: C |- rt : OK
  -- Reftype_ok: C |- rt' : OK
  -- Reftype_sub: C |- rt <: rt'

rule Instr_ok/ref.cast:
  C |- REF.CAST rt : rt' -> rt
  -- Reftype_ok: C |- rt : OK
  -- Reftype_ok: C |- rt' : OK
  -- Reftype_sub: C |- rt <: rt'


;; Scalar reference instructions

rule Instr_ok/i31.get:
  C |- I31.GET sx : (REF NULL I31) -> I32


;; Structure instructions

rule Instr_ok/struct.new:
  C |- STRUCT.NEW x : $unpack(zt)* -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ STRUCT (mut? zt)*

rule Instr_ok/struct.new_default:
  C |- STRUCT.NEW_DEFAULT x : eps -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ STRUCT (mut? zt)*
  -- (Defaultable: |- $unpack(zt) DEFAULTABLE)*

def $is_packtype(storagetype) : bool             hint(show %1 = $unpack(%1)) hint(prose "%1 is a packed type")
def $is_packtype(zt) = zt = $unpack(zt)

rule Instr_ok/struct.get:
  C |- STRUCT.GET sx? x i : (REF NULL (_IDX x)) -> $unpack(zt)
  -- Expand: C.TYPES[x] ~~ STRUCT ft*
  -- if ft*[i] = mut? zt
  -- if sx? = eps <=> $is_packtype(zt)

rule Instr_ok/struct.set:
  C |- STRUCT.SET x i : (REF NULL (_IDX x)) $unpack(zt) -> eps
  -- Expand: C.TYPES[x] ~~ STRUCT ft*
  -- if ft*[i] = MUT zt


;; Array instructions

rule Instr_ok/array.new:
  C |- ARRAY.NEW x : $unpack(zt) I32 -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ ARRAY (mut? zt)

rule Instr_ok/array.new_default:
  C |- ARRAY.NEW_DEFAULT x : I32 -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ ARRAY (mut? zt)
  -- Defaultable: |- $unpack(zt) DEFAULTABLE

rule Instr_ok/array.new_fixed:
  C |- ARRAY.NEW_FIXED x n : $unpack(zt)^n -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ ARRAY (mut? zt)

rule Instr_ok/array.new_elem:
  C |- ARRAY.NEW_ELEM x y : I32 I32 -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ ARRAY (mut? rt)
  -- Reftype_sub: C |- C.ELEMS[y] <: rt

rule Instr_ok/array.new_data:
  C |- ARRAY.NEW_DATA x y : I32 I32 -> (REF (_IDX x))
  -- Expand: C.TYPES[x] ~~ ARRAY (mut? zt)
  -- if $unpack(zt) = numtype \/ $unpack(zt) = vectype
  -- if C.DATAS[y] = OK

rule Instr_ok/array.get:
  C |- ARRAY.GET sx? x : (REF NULL (_IDX x)) I32 -> $unpack(zt)
  -- Expand: C.TYPES[x] ~~ ARRAY (mut? zt)
  -- if sx? = eps <=> $is_packtype(zt)

rule Instr_ok/array.set:
  C |- ARRAY.SET x : (REF NULL (_IDX x)) I32 $unpack(zt) -> eps
  -- Expand: C.TYPES[x] ~~ ARRAY (MUT zt)

rule Instr_ok/array.len:
  C |- ARRAY.LEN : (REF NULL ARRAY) -> I32

rule Instr_ok/array.fill:
  C |- ARRAY.FILL x : (REF NULL (_IDX x)) I32 $unpack(zt) I32 -> eps
  -- Expand: C.TYPES[x] ~~ ARRAY (MUT zt)

rule Instr_ok/array.copy:
  C |- ARRAY.COPY x_1 x_2 : (REF NULL (_IDX x_1)) I32 (REF NULL (_IDX x_2)) I32 I32 -> eps
  -- Expand: C.TYPES[x_1] ~~ ARRAY (MUT zt_1)
  -- Expand: C.TYPES[x_2] ~~ ARRAY (mut? zt_2)
  -- Storagetype_sub: C |- zt_2 <: zt_1

rule Instr_ok/array.init_elem:
  C |- ARRAY.INIT_ELEM x y : (REF NULL (_IDX x)) I32 I32 I32 -> eps
  -- Expand: C.TYPES[x] ~~ ARRAY (MUT zt)
  -- Storagetype_sub: C |- C.ELEMS[y] <: zt

rule Instr_ok/array.init_data:
  C |- ARRAY.INIT_DATA x y : (REF NULL (_IDX x)) I32 I32 I32 -> eps
  -- Expand: C.TYPES[x] ~~ ARRAY (MUT zt)
  -- if $unpack(zt) = numtype \/ $unpack(zt) = vectype
  -- if C.DATAS[y] = OK


;; External reference instructions

rule Instr_ok/extern.convert_any:
  C |- EXTERN.CONVERT_ANY : (REF null_1? ANY) -> (REF null_2? EXTERN)
  -- if null_1? = null_2?

rule Instr_ok/any.convert_extern:
  C |- ANY.CONVERT_EXTERN : (REF null_1? EXTERN) -> (REF null_2? ANY)
  -- if null_1? = null_2?


;; Local instructions

rule Instr_ok/local.get:
  C |- LOCAL.GET x : eps -> t
  -- if C.LOCALS[x] = SET t

rule Instr_ok/local.set:
  C |- LOCAL.SET x : t ->_(x) eps
  -- if C.LOCALS[x] = init t

rule Instr_ok/local.tee:
  C |- LOCAL.TEE x : t ->_(x) t
  -- if C.LOCALS[x] = init t


;; Global instructions

rule Instr_ok/global.get:
  C |- GLOBAL.GET x : eps -> t
  -- if C.GLOBALS[x] = mut? t

rule Instr_ok/global.set:
  C |- GLOBAL.SET x : t -> eps
  -- if C.GLOBALS[x] = MUT t


;; Table instructions

rule Instr_ok/table.get:
  C |- TABLE.GET x : at -> rt
  -- if C.TABLES[x] = at lim rt

rule Instr_ok/table.set:
  C |- TABLE.SET x : at rt -> eps
  -- if C.TABLES[x] = at lim rt

rule Instr_ok/table.size:
  C |- TABLE.SIZE x : eps -> at
  -- if C.TABLES[x] = at lim rt

rule Instr_ok/table.grow:
  C |- TABLE.GROW x : rt at -> I32
  -- if C.TABLES[x] = at lim rt

rule Instr_ok/table.fill:
  C |- TABLE.FILL x : at rt at -> eps
  -- if C.TABLES[x] = at lim rt

rule Instr_ok/table.copy:
  C |- TABLE.COPY x_1 x_2 : at_1 at_2 $minat(at_1, at_2) -> eps
  -- if C.TABLES[x_1] = at_1 lim_1 rt_1
  -- if C.TABLES[x_2] = at_2 lim_2 rt_2
  -- Reftype_sub: C |- rt_2 <: rt_1

rule Instr_ok/table.init:
  C |- TABLE.INIT x y : at I32 I32 -> eps
  -- if C.TABLES[x] = at lim rt_1
  -- if C.ELEMS[y] = rt_2
  -- Reftype_sub: C |- rt_2 <: rt_1

rule Instr_ok/elem.drop:
  C |- ELEM.DROP x : eps -> eps
  -- if C.ELEMS[x] = rt


;; Memory instructions

relation Memarg_ok: |- memarg : addrtype -> N  hint(name "T-memarg") hint(macro "%memarg") hint(prose "%1 is valid for %2 and %3")

rule Memarg_ok:
  |- {ALIGN n, OFFSET m} : at -> N
  -- if $(2^n <= N/8)
  -- if $(m < 2^$size(at))


rule Instr_ok/memory.size:
  C |- MEMORY.SIZE x : eps -> at
  -- if C.MEMS[x] = at lim PAGE

rule Instr_ok/memory.grow:
  C |- MEMORY.GROW x : at -> at
  -- if C.MEMS[x] = at lim PAGE

rule Instr_ok/memory.fill:
  C |- MEMORY.FILL x : at I32 at -> eps
  -- if C.MEMS[x] = at lim PAGE

rule Instr_ok/memory.copy:
  C |- MEMORY.COPY x_1 x_2 : at_1 at_2 $minat(at_1, at_2) -> eps
  -- if C.MEMS[x_1] = at_1 lim_1 PAGE
  -- if C.MEMS[x_2] = at_2 lim_2 PAGE

rule Instr_ok/memory.init:
  C |- MEMORY.INIT x y : at I32 I32 -> eps
  -- if C.MEMS[x] = at lim PAGE
  -- if C.DATAS[y] = OK

rule Instr_ok/data.drop:
  C |- DATA.DROP x : eps -> eps
  -- if C.DATAS[x] = OK

(;
rule Instr_ok/load:
  C |- LOAD nt (N _ sx)? x memarg : at -> nt
  -- if C.MEMS[x] = at lim PAGE
  -- if $(2^(memarg.ALIGN) <= $size(nt)/8)
  -- if $(2^(memarg.ALIGN) <= N/8 < $size(nt)/8)?
  -- if N? = eps \/ nt = Inn
;)

rule Instr_ok/load-val:
  C |- LOAD nt x memarg : at -> nt
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> $size(nt)

rule Instr_ok/load-pack:
  C |- LOAD Inn (M _ sx) x memarg : at -> Inn
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> M

(;
rule Instr_ok/store:
  C |- STORE nt N? x memarg : at nt -> eps
  -- if C.MEMS[x] = at lim PAGE
  -- if $(2^(memarg.ALIGN) <= $size(nt)/8)
  -- if $(2^(memarg.ALIGN) <= N/8 < $size(nt)/8)?
  -- if N? = eps \/ nt = Inn
;)

rule Instr_ok/store-val:
  C |- STORE nt x memarg : at nt -> eps
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> $size(nt)

rule Instr_ok/store-pack:
  C |- STORE Inn M x memarg : at Inn -> eps
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> M

rule Instr_ok/vload-val:
  C |- VLOAD V128 x memarg : at -> V128
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> $vsize(V128)

rule Instr_ok/vload-pack:
  C |- VLOAD V128 (SHAPE M X N _ sx) x memarg : at -> V128
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> $(M*N)

rule Instr_ok/vload-splat:
  C |- VLOAD V128 (SPLAT N) x memarg : at -> V128
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> N

rule Instr_ok/vload-zero:
  C |- VLOAD V128 (ZERO N) x memarg : at -> V128
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> N

rule Instr_ok/vload_lane:
  C |- VLOAD_LANE V128 N x memarg i : at V128 -> V128
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> N
  -- if $(i < 128/N)

rule Instr_ok/vstore:
  C |- VSTORE V128 x memarg : at V128 -> eps
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> $vsize(V128)

rule Instr_ok/vstore_lane:
  C |- VSTORE_LANE V128 N x memarg i : at V128 -> eps
  -- if C.MEMS[x] = at lim PAGE
  -- Memarg_ok: |- memarg : at -> N
  -- if $(i < 128/N)


;; Numeric instructions

rule Instr_ok/const:
  C |- CONST nt c_nt : eps -> nt

rule Instr_ok/unop:
  C |- UNOP nt unop_nt : nt -> nt

rule Instr_ok/binop:
  C |- BINOP nt binop_nt : nt nt -> nt

rule Instr_ok/testop:
  C |- TESTOP nt testop_nt : nt -> I32

rule Instr_ok/relop:
  C |- RELOP nt relop_nt : nt nt -> I32

rule Instr_ok/cvtop:
  C |- CVTOP nt_1 nt_2 cvtop : nt_2 -> nt_1


;; Vector instructions

rule Instr_ok/vconst:
  C |- VCONST V128 c : eps -> V128

rule Instr_ok/vvunop:
  C |- VVUNOP V128 vvunop : V128 -> V128

rule Instr_ok/vvbinop:
  C |- VVBINOP V128 vvbinop : V128 V128 -> V128

rule Instr_ok/vvternop:
  C |- VVTERNOP V128 vvternop : V128 V128 V128 -> V128

rule Instr_ok/vvtestop:
  C |- VVTESTOP V128 vvtestop : V128 -> I32

rule Instr_ok/vunop:
  C |- VUNOP sh vunop : V128 -> V128

rule Instr_ok/vbinop:
  C |- VBINOP sh vbinop : V128 V128 -> V128

rule Instr_ok/vternop:
  C |- VTERNOP sh vternop : V128 V128 V128 -> V128

rule Instr_ok/vtestop:
  C |- VTESTOP sh vtestop : V128 -> I32

rule Instr_ok/vrelop:
  C |- VRELOP sh vrelop : V128 V128 -> V128

rule Instr_ok/vshiftop:
  C |- VSHIFTOP sh vshiftop : V128 I32 -> V128

rule Instr_ok/vbitmask:
  C |- VBITMASK sh : V128 -> I32

rule Instr_ok/vswizzlop:
  C |- VSWIZZLOP sh vswizzlop : V128 V128 -> V128

rule Instr_ok/vshuffle:
  C |- VSHUFFLE sh i* : V128 V128 -> V128
  -- (if $(i < 2*$dim(sh)))*

rule Instr_ok/vsplat:
  C |- VSPLAT sh : $unpackshape(sh) -> V128

rule Instr_ok/vextract_lane:
  C |- VEXTRACT_LANE sh sx? i : V128 -> $unpackshape(sh)
  -- if i < $dim(sh)

rule Instr_ok/vreplace_lane:
  C |- VREPLACE_LANE sh i : V128 $unpackshape(sh) -> V128
  -- if i < $dim(sh)

rule Instr_ok/vextunop:
  C |- VEXTUNOP sh_1 sh_2 vextunop : V128 -> V128

rule Instr_ok/vextbinop:
  C |- VEXTBINOP sh_1 sh_2 vextbinop : V128 V128 -> V128

rule Instr_ok/vextternop:
  C |- VEXTTERNOP sh_1 sh_2 vextternop : V128 V128 V128 -> V128

rule Instr_ok/vnarrow:
  C |- VNARROW sh_1 sh_2 sx : V128 V128 -> V128

rule Instr_ok/vcvtop:
  C |- VCVTOP sh_1 sh_2 vcvtop : V128 -> V128


;; Instruction sequences

rule Instrs_ok/empty:
  C |- eps : eps -> eps

;; TODO(3, rossberg): enable x_1*#x_2* to avoid space
rule Instrs_ok/seq:
  C |- instr_1 instr_2* : t_1* ->_(x_1* x_2*) t_3*
  -- Instr_ok: C |- instr_1 : t_1* ->_(x_1*) t_2*
  -- (if C.LOCALS[x_1] = init t)*
  -- Instrs_ok: $with_locals(C, x_1*, (SET t)*) |- instr_2* : t_2* ->_(x_2*) t_3*

rule Instrs_ok/sub:
  C |- instr* : it'
  -- Instrs_ok: C |- instr* : it
  -- Instrtype_sub: C |- it <: it'
  -- Instrtype_ok: C |- it' : OK

;; TODO(3, rossberg): allow omitting parens
rule Instrs_ok/frame:
  C |- instr* : (t* t_1*) ->_(x*) (t* t_2*)
  -- Instrs_ok: C |- instr* : t_1* ->_(x*) t_2*
  -- Resulttype_ok: C |- t* : OK


;; Expressions

rule Expr_ok:
  C |- instr* : t*
  -- Instrs_ok: C |- instr* : eps ->_(eps) t*


;; Constant expressions

relation Instr_const: context |- instr CONST             hint(name "C-instr") hint(macro "%instrconst")
relation Expr_const: context |- expr CONST               hint(name "C-expr")  hint(macro "%exprconst")
relation Expr_ok_const: context |- expr : valtype CONST  hint(name "TC-expr") hint(macro "%exprokconst")

rule Instr_const/const:
  C |- (CONST nt c_nt) CONST

rule Instr_const/vconst:
  C |- (VCONST vt c_vt) CONST

rule Instr_const/ref.null:
  C |- (REF.NULL ht) CONST

rule Instr_const/ref.i31:
  C |- (REF.I31) CONST

rule Instr_const/ref.func:
  C |- (REF.FUNC x) CONST

rule Instr_const/struct.new:
  C |- (STRUCT.NEW x) CONST

rule Instr_const/struct.new_default:
  C |- (STRUCT.NEW_DEFAULT x) CONST

rule Instr_const/array.new:
  C |- (ARRAY.NEW x) CONST

rule Instr_const/array.new_default:
  C |- (ARRAY.NEW_DEFAULT x) CONST

rule Instr_const/array.new_fixed:
  C |- (ARRAY.NEW_FIXED x n) CONST

rule Instr_const/any.convert_extern:
  C |- (ANY.CONVERT_EXTERN) CONST

rule Instr_const/extern.convert_any:
  C |- (EXTERN.CONVERT_ANY) CONST

rule Instr_const/global.get:
  C |- (GLOBAL.GET x) CONST
  -- if C.GLOBALS[x] = t

rule Instr_const/binop:
  C |- (BINOP Inn binop) CONST
  -- if Inn <- I32 I64
  -- if binop <- ADD SUB MUL


rule Expr_const: C |- instr* CONST
  -- (Instr_const: C |- instr CONST)*


rule Expr_ok_const:
  C |- expr : t CONST
  -- Expr_ok: C |- expr : t
  -- Expr_const: C |- expr CONST
