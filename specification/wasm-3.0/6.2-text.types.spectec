;;
;; Text Format of Types
;;

;; Value Types

grammar Tnumtype : numtype =
  | "i32" => I32
  | "i64" => I64
  | "f32" => F32
  | "f64" => F64

grammar Tvectype : vectype =
  | "v128" => V128


grammar Tabsheaptype : heaptype =
  | "any" => ANY
  | "eq" => EQ
  | "i31" => I31
  | "struct" => STRUCT
  | "array" => ARRAY
  | "none" => NONE
  | "func" => FUNC
  | "nofunc" => NOFUNC
  | "exn" => EXN
  | "noexn" => NOEXN
  | "extern" => EXTERN
  | "noextern" => NOEXTERN

grammar Theaptype_(I) : heaptype =
  | ht:Tabsheaptype => ht
  | x:Ttypeidx_(I) => _IDX x

grammar Tnull : null =
  | "null" => NULL

grammar Treftype_(I)/base : reftype =
  | "(" "ref" null?:Tnull? ht:Theaptype_(I) ")" => REF null? ht
  | ...

grammar Treftype_(I)/abbrev : reftype = ...
  | "anyref" == "(" "ref" "null" "any" ")"
  | "eqref" == "(" "ref" "null" "eq" ")"
  | "i31ref" == "(" "ref" "null" "i31" ")"
  | "structref" == "(" "ref" "null" "struct" ")"
  | "arrayref" == "(" "ref" "null" "array" ")"
  | "nullref" == "(" "ref" "null" "none" ")"
  | "funcref" == "(" "ref" "null" "func" ")"
  | "nullfuncref" == "(" "ref" "null" "nofunc" ")"
  | "exnref" == "(" "ref" "null" "exn" ")"
  | "nullexnref" == "(" "ref" "null" "noexn" ")"
  | "externref" == "(" "ref" "null" "extern" ")"
  | "nullexternref" == "(" "ref" "null" "noextern" ")"

grammar Tvaltype_(I) : valtype =
  | nt:Tnumtype => nt
  | vt:Tvectype => vt
  | rt:Treftype_(I) => rt


;; Type Definitions

grammar Tpacktype : packtype =
  | "i8" => I8
  | "i16" => I16

grammar Tstoragetype_(I) : storagetype =
  | t:Tvaltype_(I) => t
  | pt:Tpacktype => pt

grammar Tfieldtype_(I) : fieldtype =
  | zt:Tstoragetype_(I) => zt
  | "(" "mut" zt:Tstoragetype_(I) ")" => MUT zt

grammar Tfield_(I)/base : (fieldtype, name?) =
  | "(" "field" id?:Tid? ft:Tfieldtype_(I) ")" => (ft, id?)
  | ...

;; TODO(5, rossberg): The type currently glosses over the fact that the
;; abbreviation yields multiple fields. Similarly for params and results.
grammar Tfield_(I)/abbrev : (fieldtype, name?) = ... | "(" "field" Tfieldtype_(I)* ")" == ("(" "field" Tfieldtype_(I) ")")*

grammar Tparam_(I)/base : (valtype, name?) =
  | "(" "param" id?:Tid? t:Tvaltype_(I) ")" => (t, id?)
  | ...

grammar Tparam_(I)/abbrev : (valtype, name?) = ... | "(" "param" Tvaltype_(I)* ")" == ("(" "param" Tvaltype_(I) ")")*

grammar Tresult_(I)/base : valtype =
  | "(" "result" t:Tvaltype_(I) ")" => t
  | ...

grammar Tresult_(I)/abbrev : valtype = ... | "(" "result" Tvaltype_(I)* ")" == ("(" "param" Tvaltype_(I) ")")*

grammar Tcomptype_(I) : (comptype, idctxt) =
  | "(" "struct" (ft,id?)*:Tlist(Tfield_(I)) ")" => (STRUCT ft*, {FIELDS (id?)*})
  | "(" "array" ft:Tfieldtype_(I) ")" => (ARRAY ft, {})
  | "(" "func" (t_1,id?)*:Tlist(Tparam_(I)) t_2*:Tlist(Tresult_(I)) ")" => (FUNC t_1* -> t_2*, {})


grammar Tfinal : final =
  | "final" => FINAL

grammar Tsubtype_(I)/base : (subtype, idctxt) =
  | "(" "sub" fin?:Tfinal? x*:Tlist(Ttypeidx_(I)) (ct,I'):Tcomptype_(I) ")" => (SUB fin? $($(_IDX x))* ct, I')
  | ...

grammar Tsubtype_(I)/abbrev : (subtype, idctxt) = ... | Tcomptype_(I) == "(" "sub" "final" Tcomptype_(I) ")"

grammar Ttypedef_(I) : (subtype, idctxt) =
  | "(" "type" id?:Tid? (st,I'):Tsubtype_(I) ")" => (st, I' ++ {TYPES (id?)})

grammar Trectype_(I)/base : (rectype, idctxt) =
  | "(" "rec" (st,I')*:Tlist(Ttypedef_(I)) ")" => (REC st*, $concat_idctxt(I'*))
  | ...

grammar Trectype_(I)/abbrev : (rectype, idctxt) = ... | Ttypedef_(I) == "(" "rec" Ttypedef_(I) ")"


;; External Types

grammar Taddrtype/base : addrtype =
  | "i32" => I32
  | "i64" => I64
  | ...

grammar Taddrtype/abbrev : addrtype = ... | eps == "i32"


grammar Tlimits : limits =
  | n:Tu64 => `[n .. eps]
  | n:Tu64 m:Tu64 => `[n .. m]


grammar Ttagtype_(I) : tagtype =
  | (x,I'):Ttypeuse_(I) => _IDX x

grammar Tglobaltype_(I) : globaltype =
  | t:Tvaltype_(I) => t
  | "(" "mut" t:Tvaltype_(I) ")" => MUT t

grammar Tmemtype_(I) : memtype =
  | at:Taddrtype lim:Tlimits => at lim PAGE

grammar Ttabletype_(I) : tabletype =
  | at:Taddrtype lim:Tlimits rt:Treftype_(I) => at lim rt


grammar Texterntype_(I) : (externtype, idctxt) =
  | "(" "tag" id?:Tid? jt:Ttagtype_(I) ")" => (TAG jt, {TAGS (id?)})
  | "(" "global" id?:Tid? gt:Tglobaltype_(I) ")" => (GLOBAL gt, {GLOBALS (id?)})
  | "(" "memory" id?:Tid? mt:Tmemtype_(I) ")" => (MEM mt, {MEMS (id?)})
  | "(" "table" id?:Tid? tt:Ttabletype_(I) ")" => (TABLE tt, {TABLES (id?)})
  | "(" "func" id?:Tid? (x,I'):Ttypeuse_(I) ")" => (FUNC $($(_IDX x)), {FUNCS (id?)})


;; Type uses

grammar Ttypeuse_(I)/base : (typeidx, idctxt) =
  | "(" "type" x:Ttypeidx_(I) ")" => (x, I')
    ----
    -- if I.TYPEDEFS[x] = _DEF (REC st*) i
    -- if st*[i] = SUB FINAL (FUNC t_1* -> t_2*)
    -- if I' = {LOCALS (eps)^(|t_1*|)}
  | "(" "type" x:Ttypeidx_(I) ")" (t_1,id?)*:Tparam_(I)* t_2*:Tresult_(I)* => (x, I')
    ----
    -- if I.TYPEDEFS[x] = _DEF (REC st*) i
    -- if st*[i] = SUB FINAL (FUNC t_1* -> t_2*)
    -- if I' = {LOCALS (id?)*}
    -- Idctxt_ok: |- I' : OK
  | ...

grammar Ttypeuse_(I)/abbrev : (typeidx, idctxt) = ... | (t_1,id?)*:Tparam_(I)* t_2*:Tresult_(I)* == "(" "type" x:Ttypeidx_(I) ")" Tparam_(I)* Tresult_(I)*
    ----
    -- if I.TYPEDEFS[x] = _DEF (REC (SUB FINAL (FUNC t_1* -> t_2*))) 0
    -- (if I.TYPEDEFS[i] =/= _DEF (REC (SUB FINAL (FUNC t_1* -> t_2*))) 0)^(i<x)

;; TODO(5, rossberg): This does not yet formalise how new type definitions are
;; appended to the module if needed for implicit type uses.
