;;
;; Binary Format of Types
;;

;; Value types

grammar Bnumtype : numtype =
  | 0x7C => F64
  | 0x7D => F32
  | 0x7E => I64
  | 0x7F => I32

grammar Bvectype : vectype =
  | 0x7B => V128

grammar Babsheaptype : heaptype =
  | 0x69 => EXN
  | 0x6A => ARRAY
  | 0x6B => STRUCT
  | 0x6C => I31
  | 0x6D => EQ
  | 0x6E => ANY
  | 0x6F => EXTERN
  | 0x70 => FUNC
  | 0x71 => NONE
  | 0x72 => NOEXTERN
  | 0x73 => NOFUNC
  | 0x74 => NOEXN

grammar Bheaptype : heaptype =
  | ht:Babsheaptype => ht
  | x33:Bs33 => _IDX $s33_to_u32(x33)  -- if x33 >= 0

grammar Breftype : reftype =
  | 0x63 ht:Bheaptype => REF NULL ht
  | 0x64 ht:Bheaptype => REF ht
  | ht:Babsheaptype => REF NULL ht

grammar Bvaltype : valtype =
  | nt:Bnumtype => nt
  | vt:Bvectype => vt
  | rt:Breftype => rt


grammar Bresulttype : resulttype =
  | t*:Blist(Bvaltype) => t*


;; Type definitions

grammar Bmut : mut? =
  | 0x00 => eps
  | 0x01 => MUT

grammar Bpacktype : packtype =
  | 0x77 => I16
  | 0x78 => I8

grammar Bstoragetype : storagetype =
  | t:Bvaltype => t
  | pt:Bpacktype => pt

grammar Bfieldtype : fieldtype =
  | zt:Bstoragetype mut?:Bmut => mut? zt

grammar Bcomptype : comptype =
  | 0x5E ft:Bfieldtype => ARRAY ft
  | 0x5F ft*:Blist(Bfieldtype) => STRUCT ft*
  | 0x60 t_1*:Bresulttype t_2*:Bresulttype => FUNC t_1* -> t_2*

grammar Bsubtype : subtype =
  | 0x4F x*:Blist(Btypeidx) ct:Bcomptype => SUB FINAL (_IDX x)* ct
  | 0x50 x*:Blist(Btypeidx) ct:Bcomptype => SUB (_IDX x)* ct
  | ct:Bcomptype => SUB FINAL eps ct

grammar Brectype : rectype =
  | 0x4E st*:Blist(Bsubtype) => REC st*
  | st:Bsubtype => REC st


;; External types

grammar Blimits : (addrtype, limits) =
  | 0x00 n:Bu64 => (I32, `[n .. eps])
  | 0x01 n:Bu64 m:Bu64 => (I32, `[n .. m])
  | 0x04 n:Bu64 => (I64, `[n .. eps])
  | 0x05 n:Bu64 m:Bu64 => (I64, `[n .. m])

grammar Btagtype : tagtype =
  | 0x00 x:Btypeidx => _IDX x

grammar Bglobaltype : globaltype =
  | t:Bvaltype mut?:Bmut => mut? t

grammar Bmemtype : memtype =
  | (at,lim):Blimits => at lim PAGE

grammar Btabletype : tabletype =
  | rt:Breftype (at,lim):Blimits => at lim rt


grammar Bexterntype : externtype =
  | 0x00 x:Btypeidx => FUNC (_IDX x)
  | 0x01 tt:Btabletype => TABLE tt
  | 0x02 mt:Bmemtype => MEM mt
  | 0x03 gt:Bglobaltype => GLOBAL gt
  | 0x04 jt:Btagtype => TAG jt
