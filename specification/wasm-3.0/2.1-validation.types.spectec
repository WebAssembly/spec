;;
;; Validation of Types
;;

;; Value types

relation Numtype_ok: context |- numtype : OK    hint(name "K-num")  hint(macro "%numtype")
relation Vectype_ok: context |- vectype : OK    hint(name "K-vec")  hint(macro "%vectype")
relation Heaptype_ok: context |- heaptype : OK  hint(name "K-heap") hint(macro "%heaptype")
relation Reftype_ok: context |- reftype : OK    hint(name "K-ref")  hint(macro "%reftype")
relation Valtype_ok: context |- valtype : OK    hint(name "K-val")  hint(macro "%valtype")
relation Typeuse_ok: context |- typeuse : OK    hint(name "K-typeuse") hint(macro "%typeuse")

rule Numtype_ok:
  C |- numtype : OK

rule Vectype_ok:
  C |- vectype : OK

rule Heaptype_ok/abs:
  C |- absheaptype : OK

rule Heaptype_ok/typeuse:
  C |- typeuse : OK
  -- Typeuse_ok: C |- typeuse : OK

rule Reftype_ok:
  C |- REF NULL? heaptype : OK
  -- Heaptype_ok: C |- heaptype : OK

rule Valtype_ok/num:
  C |- numtype : OK
  -- Numtype_ok: C |- numtype : OK

rule Valtype_ok/vec:
  C |- vectype : OK
  -- Vectype_ok: C |- vectype : OK

rule Valtype_ok/ref:
  C |- reftype : OK
  -- Reftype_ok: C |- reftype : OK

rule Valtype_ok/bot:
  C |- BOT : OK


;; Result & instruction types

relation Resulttype_ok: context |- resulttype : OK  hint(name "K-result") hint(macro "%resulttype")
relation Instrtype_ok: context |- instrtype : OK    hint(name "K-instr")  hint(macro "%instrtype")

rule Resulttype_ok:
  C |- t* : OK
  -- (Valtype_ok: C |- t : OK)*

rule Instrtype_ok:
  C |- t_1* ->_(x*) t_2* : OK
  -- Resulttype_ok: C |- t_1* : OK
  -- Resulttype_ok: C |- t_2* : OK
  -- (if C.LOCALS[x] = lct)*


;; Type expansion

relation Expand: deftype ~~ comptype hint(macro "%expanddt") hint(tabular)
  hint(prose "The :ref:`expansion <aux-expand-deftype>` of %1 is %2")  ;; TODO(3, ?): avoid hardcoding reST

relation Expand_use: typeuse ~~_context comptype  hint(macro "%expandyy") hint(tabular)
  hint(prose "The :ref:`expansion <aux-expand-typeuse>` of %2 is %3")  ;; TODO(3, ?): avoid hardcoding reST

rule Expand: deftype ~~ comptype   -- if $expanddt(deftype) = comptype

rule Expand_use/deftype: deftype ~~_C comptype       -- Expand: deftype ~~ comptype
rule Expand_use/typeidx: _IDX typeidx ~~_C comptype  -- Expand: C.TYPES[typeidx] ~~ comptype


;; Type definitions

syntax oktypeidx hint(show OK#((typeidx))) hint(prose_desc "type index") =
  | OK typeidx      hint(show OK#(%))     hint(macro "%subtype")    hint(prose "%1")
syntax oktypeidxnat hint(show OK#(typeidx,n)) =
  | OK typeidx nat  hint(show OK#(%,%))   hint(macro "%subtypeext")

relation Packtype_ok: context |- packtype : OK          hint(name "K-pack")    hint(macro "%packtype")
relation Fieldtype_ok: context |- fieldtype : OK        hint(name "K-field")   hint(macro "%fieldtype")
relation Storagetype_ok: context |- storagetype : OK    hint(name "K-storage") hint(macro "%storagetype")
relation Comptype_ok: context |- comptype : OK          hint(name "K-comp")    hint(macro "%comptype")
relation Subtype_ok: context |- subtype : oktypeidx     hint(name "K-sub")     hint(macro "%subtype")     hint(prosepp "for")
relation Rectype_ok: context |- rectype : oktypeidx     hint(name "K-rect")    hint(macro "%rectype")     hint(prosepp "for")
relation Subtype_ok2: context |- subtype : oktypeidxnat hint(name "K-sub2")    hint(macro "%subtypeext")  hint(prosepp "for")
relation Rectype_ok2: context |- rectype : oktypeidxnat hint(name "K-rec2")    hint(macro "%rectypeext")  hint(prosepp "for")
relation Deftype_ok: context |- deftype : OK            hint(name "K-def")     hint(macro "%deftype")

;; Forward declarations for validation.subtyping
relation Comptype_sub: context |- comptype <: comptype  hint(name "S-comp")    hint(macro "%comptypematch")
relation Deftype_sub: context |- deftype <: deftype     hint(name "S-def")     hint(macro "%deftypematch")


rule Typeuse_ok/typeidx:
  C |- _IDX typeidx : OK
  -- if C.TYPES[typeidx] = dt

rule Typeuse_ok/rec:
  C |- REC i : OK
  -- if C.RECS[i] = st

rule Typeuse_ok/deftype:
  C |- deftype : OK
  -- Deftype_ok: C |- deftype : OK


rule Packtype_ok:
  C |- packtype : OK

rule Storagetype_ok/val:
  C |- valtype : OK
  -- Valtype_ok: C |- valtype : OK

rule Storagetype_ok/pack:
  C |- packtype : OK
  -- Packtype_ok: C |- packtype : OK

rule Fieldtype_ok:
  C |- MUT? storagetype : OK
  -- Storagetype_ok: C |- storagetype : OK


rule Comptype_ok/struct:
  C |- STRUCT fieldtype* : OK
  -- (Fieldtype_ok: C |- fieldtype : OK)*

rule Comptype_ok/array:
  C |- ARRAY fieldtype : OK
  -- Fieldtype_ok: C |- fieldtype : OK

rule Comptype_ok/func:
  C |- FUNC t_1* -> t_2* : OK
  -- Resulttype_ok: C |- t_1* : OK
  -- Resulttype_ok: C |- t_2* : OK


rule Subtype_ok:
  C |- SUB FINAL? (_IDX x)* comptype : OK(x_0)
  -- if |x*| <= 1
  -- (if x < x_0)*
  -- (if $unrolldt(C.TYPES[x]) = SUB (_IDX x')* comptype')*
  ----
  -- Comptype_ok: C |- comptype : OK
  -- (Comptype_sub: C |- comptype <: comptype')*

def $before(typeuse, typeidx, nat) : bool   hint(show % << %,%) hint(macro "before")
def $before(deftype, x, i) = true
def $before(_IDX typeidx, x, i) = typeidx < x
def $before(REC j, x, i) = j < i

def $unrollht(context, heaptype) : subtype  hint(show $unroll_(%,%))
def $unrollht(C, deftype) = $unrolldt(deftype)
def $unrollht(C, _IDX typeidx) = $unrolldt(C.TYPES[typeidx])
def $unrollht(C, REC i) = C.RECS[i]

rule Subtype_ok2:
  C |- SUB FINAL? typeuse* compttype : OK x i
  -- if |typeuse*| <= 1
  -- (if $before(typeuse, x, i))*
  -- (if $unrollht(C, typeuse) = SUB typeuse'* comptype')*
  ----
  -- Comptype_ok: C |- comptype : OK
  -- (Comptype_sub: C |- comptype <: comptype')*


rule Rectype_ok/empty:
  C |- REC eps : OK(x)

rule Rectype_ok/cons:
  C |- REC (subtype_1 subtype*) : OK(x)
  -- Subtype_ok: C |- subtype_1 : OK(x)
  -- Rectype_ok: C |- REC subtype* : OK($(x+1))

rule Rectype_ok/_rec2:
  C |- REC subtype* : OK(x)
  -- Rectype_ok2: C, RECS subtype* |- REC subtype* : OK x 0

rule Rectype_ok2/empty:
  C |- REC eps : OK x i

rule Rectype_ok2/cons:
  C |- REC (subtype_1 subtype*) : OK x i
  -- Subtype_ok2: C |- subtype_1 : OK x i
  -- Rectype_ok2: C |- REC subtype* : OK $(x+1) $(i+1)


rule Deftype_ok:
  C |- _DEF rectype i : OK
  -- Rectype_ok: C |- rectype : OK(x)
  -- if rectype = REC subtype^n
  -- if i < n


;; External types

relation Limits_ok: context |- limits : nat         hint(name "K-limits") hint(macro "%limits")  hint(prosepp "within")
relation Tagtype_ok: context |- tagtype : OK        hint(name "K-tag")    hint(macro "%tagtype")
relation Globaltype_ok: context |- globaltype : OK  hint(name "K-global") hint(macro "%globaltype")
relation Memtype_ok: context |- memtype : OK        hint(name "K-mem")    hint(macro "%memtype")
relation Tabletype_ok: context |- tabletype : OK    hint(name "K-table")  hint(macro "%tabletype")
relation Externtype_ok: context |- externtype : OK  hint(name "K-extern") hint(macro "%externtype")


rule Limits_ok:
  C |- `[n .. m?] : k
  -- if n <= k
  -- (if n <= m <= k)?

rule Tagtype_ok:
  C |- typeuse : OK
  -- Typeuse_ok: C |- typeuse : OK
  -- Expand_use: typeuse ~~_C $($(FUNC t_1* -> t_2*))

rule Globaltype_ok:
  C |- MUT? t : OK
  -- Valtype_ok: C |- t : OK

rule Memtype_ok:
  C |- addrtype limits PAGE : OK
  -- Limits_ok: C |- limits : $(2^16)

rule Tabletype_ok:
  C |- addrtype limits reftype : OK
  -- Limits_ok: C |- limits : $(2^32 - 1)
  -- Reftype_ok: C |- reftype : OK


rule Externtype_ok/tag:
  C |- TAG tagtype : OK
  -- Tagtype_ok: C |- tagtype : OK

rule Externtype_ok/global:
  C |- GLOBAL globaltype : OK
  -- Globaltype_ok: C |- globaltype : OK

rule Externtype_ok/mem:
  C |- MEM memtype : OK
  -- Memtype_ok: C |- memtype : OK

rule Externtype_ok/table:
  C |- TABLE tabletype : OK
  -- Tabletype_ok: C |- tabletype : OK

rule Externtype_ok/func:
  C |- FUNC typeuse : OK
  -- Typeuse_ok: C |- typeuse : OK
  -- Expand_use: typeuse ~~_C $($(FUNC t_1* -> t_2*))
