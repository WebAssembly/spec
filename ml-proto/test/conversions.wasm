(module
  (func $i64.extend_s_i32 (param $x i32) (result i64) (i64.extend_s/i32 (get_local $x)))
  (export "i64.extend_s_i32" $i64.extend_s_i32)

  (func $i64.extend_u_i32 (param $x i32) (result i64) (i64.extend_u/i32 (get_local $x)))
  (export "i64.extend_u_i32" $i64.extend_u_i32)

  (func $i32.wrap_i64 (param $x i64) (result i32) (i32.wrap/i64 (get_local $x)))
  (export "i32.wrap_i64" $i32.wrap_i64)

  (func $i32.trunc_s_f32 (param $x f32) (result i32) (i32.trunc_s/f32 (get_local $x)))
  (export "i32.trunc_s_f32" $i32.trunc_s_f32)

  (func $i32.trunc_u_f32 (param $x f32) (result i32) (i32.trunc_u/f32 (get_local $x)))
  (export "i32.trunc_u_f32" $i32.trunc_u_f32)

  (func $i32.trunc_s_f64 (param $x f64) (result i32) (i32.trunc_s/f64 (get_local $x)))
  (export "i32.trunc_s_f64" $i32.trunc_s_f64)

  (func $i32.trunc_u_f64 (param $x f64) (result i32) (i32.trunc_u/f64 (get_local $x)))
  (export "i32.trunc_u_f64" $i32.trunc_u_f64)

  (func $i64.trunc_s_f32 (param $x f32) (result i64) (i64.trunc_s/f32 (get_local $x)))
  (export "i64.trunc_s_f32" $i64.trunc_s_f32)

  (func $i64.trunc_u_f32 (param $x f32) (result i64) (i64.trunc_u/f32 (get_local $x)))
  (export "i64.trunc_u_f32" $i64.trunc_u_f32)

  (func $i64.trunc_s_f64 (param $x f64) (result i64) (i64.trunc_s/f64 (get_local $x)))
  (export "i64.trunc_s_f64" $i64.trunc_s_f64)

  (func $i64.trunc_u_f64 (param $x f64) (result i64) (i64.trunc_u/f64 (get_local $x)))
  (export "i64.trunc_u_f64" $i64.trunc_u_f64)

  (func $f32.convert_s_i32 (param $x i32) (result f32) (f32.convert_s/i32 (get_local $x)))
  (export "f32.convert_s_i32" $f32.convert_s_i32)

  (func $f32.convert_s_i64 (param $x i64) (result f32) (f32.convert_s/i64 (get_local $x)))
  (export "f32.convert_s_i64" $f32.convert_s_i64)

  (func $f64.convert_s_i32 (param $x i32) (result f64) (f64.convert_s/i32 (get_local $x)))
  (export "f64.convert_s_i32" $f64.convert_s_i32)

  (func $f64.convert_s_i64 (param $x i64) (result f64) (f64.convert_s/i64 (get_local $x)))
  (export "f64.convert_s_i64" $f64.convert_s_i64)

  (func $f32.convert_u_i32 (param $x i32) (result f32) (f32.convert_u/i32 (get_local $x)))
  (export "f32.convert_u_i32" $f32.convert_u_i32)

  (func $f32.convert_u_i64 (param $x i64) (result f32) (f32.convert_u/i64 (get_local $x)))
  (export "f32.convert_u_i64" $f32.convert_u_i64)

  (func $f64.convert_u_i32 (param $x i32) (result f64) (f64.convert_u/i32 (get_local $x)))
  (export "f64.convert_u_i32" $f64.convert_u_i32)

  (func $f64.convert_u_i64 (param $x i64) (result f64) (f64.convert_u/i64 (get_local $x)))
  (export "f64.convert_u_i64" $f64.convert_u_i64)

  (func $f64.promote_f32 (param $x f32) (result f64) (f64.promote/f32 (get_local $x)))
  (export "f64.promote_f32" $f64.promote_f32)

  (func $f32.demote_f64 (param $x f64) (result f32) (f32.demote/f64 (get_local $x)))
  (export "f32.demote_f64" $f32.demote_f64)

  (func $f32.reinterpret_i32 (param $x i32) (result f32) (f32.reinterpret/i32 (get_local $x)))
  (export "f32.reinterpret_i32" $f32.reinterpret_i32)

  (func $f64.reinterpret_i64 (param $x i64) (result f64) (f64.reinterpret/i64 (get_local $x)))
  (export "f64.reinterpret_i64" $f64.reinterpret_i64)

  (func $i32.reinterpret_f32 (param $x f32) (result i32) (i32.reinterpret/f32 (get_local $x)))
  (export "i32.reinterpret_f32" $i32.reinterpret_f32)

  (func $i64.reinterpret_f64 (param $x f64) (result i64) (i64.reinterpret/f64 (get_local $x)))
  (export "i64.reinterpret_f64" $i64.reinterpret_f64)
)

(assert_eq (invoke "i64.extend_s_i32" (i32.literal 0)) (i64.literal 0))
(assert_eq (invoke "i64.extend_s_i32" (i32.literal 10000)) (i64.literal 10000))
(assert_eq (invoke "i64.extend_s_i32" (i32.literal -10000)) (i64.literal -10000))
(assert_eq (invoke "i64.extend_s_i32" (i32.literal -1)) (i64.literal -1))
(assert_eq (invoke "i64.extend_s_i32" (i32.literal 0x7fffffff)) (i64.literal 0x000000007fffffff))
(assert_eq (invoke "i64.extend_s_i32" (i32.literal 0x80000000)) (i64.literal 0xffffffff80000000))

(assert_eq (invoke "i64.extend_u_i32" (i32.literal 0)) (i64.literal 0))
(assert_eq (invoke "i64.extend_u_i32" (i32.literal 10000)) (i64.literal 10000))
(assert_eq (invoke "i64.extend_u_i32" (i32.literal -10000)) (i64.literal 0x00000000ffffd8f0))
(assert_eq (invoke "i64.extend_u_i32" (i32.literal -1)) (i64.literal 0xffffffff))
(assert_eq (invoke "i64.extend_u_i32" (i32.literal 0x7fffffff)) (i64.literal 0x000000007fffffff))
(assert_eq (invoke "i64.extend_u_i32" (i32.literal 0x80000000)) (i64.literal 0x0000000080000000))

(assert_eq (invoke "i32.wrap_i64" (i64.literal -1)) (i32.literal -1))
(assert_eq (invoke "i32.wrap_i64" (i64.literal -100000)) (i32.literal -100000))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0x80000000)) (i32.literal 0x80000000))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0xffffffff7fffffff)) (i32.literal 0x7fffffff))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0xffffffff00000000)) (i32.literal 0x00000000))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0xfffffffeffffffff)) (i32.literal 0xffffffff))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0xffffffff00000001)) (i32.literal 0x00000001))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0)) (i32.literal 0))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 1311768467463790320)) (i32.literal 0x9abcdef0))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0x00000000ffffffff)) (i32.literal 0xffffffff))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0x0000000100000000)) (i32.literal 0x00000000))
(assert_eq (invoke "i32.wrap_i64" (i64.literal 0x0000000100000001)) (i32.literal 0x00000001))

(assert_eq (invoke "i32.trunc_s_f32" (f32.literal 0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal 1.401298e-45)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -1.401298e-45)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal 1.0)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal 1.1)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal 1.5)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -1.0)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -1.1)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -1.5)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -1.9)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -2.0)) (i32.literal -2))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal 2147483520.0)) (i32.literal 2147483520))
(assert_eq (invoke "i32.trunc_s_f32" (f32.literal -2147483648.0)) (i32.literal -2147483648))
(assert_trap (invoke "i32.trunc_s_f32" (f32.literal 2147483648.0)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_s_f32" (f32.literal -2147483904.0)) "runtime: integer overflow")

(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal -0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 1.401298e-45)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal -1.401298e-45)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 1.0)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 1.1)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 1.5)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 1.9)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 2.0)) (i32.literal 2))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 2147483648)) (i32.literal -2147483648)) ;; 0x1.00000p+31 -> 8000 0000
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal 4294967040.0)) (i32.literal -256))
(assert_eq (invoke "i32.trunc_u_f32" (f32.literal -0.9)) (i32.literal 0))
(assert_trap (invoke "i32.trunc_u_f32" (f32.literal 4294967296.0)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_u_f32" (f32.literal -1.0)) "runtime: integer overflow")

(assert_eq (invoke "i32.trunc_s_f64" (f64.literal 0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal 4.940656e-324)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -4.940656e-324)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal 1.0)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal 1.1)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal 1.5)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -1.0)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -1.1)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -1.5)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -1.9)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -2.0)) (i32.literal -2))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal 2147483647.0)) (i32.literal 2147483647))
(assert_eq (invoke "i32.trunc_s_f64" (f64.literal -2147483648.0)) (i32.literal -2147483648))
(assert_trap (invoke "i32.trunc_s_f64" (f64.literal 2147483648.0)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_s_f64" (f64.literal -2147483649.0)) "runtime: integer overflow")

(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal -0.0)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 4.940656e-324)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal -4.940656e-324)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 1.0)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 1.1)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 1.5)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 1.9)) (i32.literal 1))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 2.0)) (i32.literal 2))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 2147483648)) (i32.literal -2147483648)) ;; 0x1.00000p+31 -> 8000 0000
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 4294967295.0)) (i32.literal -1))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal -0.9)) (i32.literal 0))
(assert_eq (invoke "i32.trunc_u_f64" (f64.literal 1e8)) (i32.literal 100000000))
(assert_trap (invoke "i32.trunc_u_f64" (f64.literal 4294967296.0)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_u_f64" (f64.literal -1.0)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_u_f64" (f64.literal 1e16)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_u_f64" (f64.literal 1e30)) "runtime: integer overflow")
(assert_trap (invoke "i32.trunc_u_f64" (f64.literal 9223372036854775808)) "runtime: integer overflow")

(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 1.401298e-45)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -1.401298e-45)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 1.0)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 1.1)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 1.5)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -1.0)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -1.1)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -1.5)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -1.9)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -2.0)) (i64.literal -2))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 4294967296)) (i64.literal 4294967296)) ;; 0x1.00000p+32 -> 1 0000 0000
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -4294967296)) (i64.literal -4294967296)) ;; -0x1.00000p+32 -> ffff ffff 0000 0000
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal 9223371487098961920.0)) (i64.literal 9223371487098961920))
(assert_eq (invoke "i64.trunc_s_f32" (f32.literal -9223372036854775808.0)) (i64.literal -9223372036854775808))
(assert_trap (invoke "i64.trunc_s_f32" (f32.literal 9223372036854775808.0)) "runtime: integer overflow")
(assert_trap (invoke "i64.trunc_s_f32" (f32.literal -9223373136366403584.0)) "runtime: integer overflow")

(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal -0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 1.401298e-45)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal -1.401298e-45)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 1.0)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 1.1)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 1.5)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 4294967296)) (i64.literal 4294967296))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal 18446742974197923840.0)) (i64.literal -1099511627776))
(assert_eq (invoke "i64.trunc_u_f32" (f32.literal -0.9)) (i64.literal 0))
(assert_trap (invoke "i64.trunc_u_f32" (f32.literal 18446744073709551616.0)) "runtime: integer overflow")
(assert_trap (invoke "i64.trunc_u_f32" (f32.literal -1.0)) "runtime: integer overflow")

(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 4.940656e-324)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -4.940656e-324)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 1.0)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 1.1)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 1.5)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -1.0)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -1.1)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -1.5)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -1.9)) (i64.literal -1))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -2.0)) (i64.literal -2))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 4294967296)) (i64.literal 4294967296)) ;; 0x1.00000p+32 -> 1 0000 0000
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -4294967296)) (i64.literal -4294967296)) ;; -0x1.00000p+32 -> ffff ffff 0000 0000
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal 9223372036854774784.0)) (i64.literal 9223372036854774784))
(assert_eq (invoke "i64.trunc_s_f64" (f64.literal -9223372036854775808.0)) (i64.literal -9223372036854775808))
(assert_trap (invoke "i64.trunc_s_f64" (f64.literal 9223372036854775808.0)) "runtime: integer overflow")
(assert_trap (invoke "i64.trunc_s_f64" (f64.literal -9223372036854777856.0)) "runtime: integer overflow")

(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal -0.0)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 4.940656e-324)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal -4.940656e-324)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 1.0)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 1.1)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 1.5)) (i64.literal 1))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 4294967295)) (i64.literal 0xffffffff))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 4294967296)) (i64.literal 0x100000000))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 18446744073709549568.0)) (i64.literal -2048))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal -0.9)) (i64.literal 0))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 1e8)) (i64.literal 100000000))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 1e16)) (i64.literal 10000000000000000))
(assert_eq (invoke "i64.trunc_u_f64" (f64.literal 9223372036854775808)) (i64.literal -9223372036854775808))
(assert_trap (invoke "i64.trunc_u_f64" (f64.literal 18446744073709551616.0)) "runtime: integer overflow")
(assert_trap (invoke "i64.trunc_u_f64" (f64.literal -1.0)) "runtime: integer overflow")

(assert_eq (invoke "f32.convert_s_i32" (i32.literal 1)) (f32.literal 1.0))
(assert_eq (invoke "f32.convert_s_i32" (i32.literal -1)) (f32.literal -1.0))
(assert_eq (invoke "f32.convert_s_i32" (i32.literal 0)) (f32.literal 0.0))
(assert_eq (invoke "f32.convert_s_i32" (i32.literal 2147483647)) (f32.literal 2147483647))
(assert_eq (invoke "f32.convert_s_i32" (i32.literal -2147483648)) (f32.literal -2147483648))
(assert_eq (invoke "f32.convert_s_i32" (i32.literal 1234567890)) (f32.literal 1234567890))

(assert_eq (invoke "f32.convert_s_i64" (i64.literal 1)) (f32.literal 1.0))
(assert_eq (invoke "f32.convert_s_i64" (i64.literal -1)) (f32.literal -1.0))
(assert_eq (invoke "f32.convert_s_i64" (i64.literal 0)) (f32.literal 0.0))
(assert_eq (invoke "f32.convert_s_i64" (i64.literal 9223372036854775807)) (f32.literal 9223372036854775807))
(assert_eq (invoke "f32.convert_s_i64" (i64.literal -9223372036854775808)) (f32.literal -9223372036854775808))
(assert_eq (invoke "f32.convert_s_i64" (i64.literal 314159265358979)) (f32.literal 314159265358979)) ;; PI

(assert_eq (invoke "f64.convert_s_i32" (i32.literal 1)) (f64.literal 1.0))
(assert_eq (invoke "f64.convert_s_i32" (i32.literal -1)) (f64.literal -1.0))
(assert_eq (invoke "f64.convert_s_i32" (i32.literal 0)) (f64.literal 0.0))
(assert_eq (invoke "f64.convert_s_i32" (i32.literal 2147483647)) (f64.literal 2147483647))
(assert_eq (invoke "f64.convert_s_i32" (i32.literal -2147483648)) (f64.literal -2147483648))
(assert_eq (invoke "f64.convert_s_i32" (i32.literal 987654321)) (f64.literal 987654321))

(assert_eq (invoke "f64.convert_s_i64" (i64.literal 1)) (f64.literal 1.0))
(assert_eq (invoke "f64.convert_s_i64" (i64.literal -1)) (f64.literal -1.0))
(assert_eq (invoke "f64.convert_s_i64" (i64.literal 0)) (f64.literal 0.0))
(assert_eq (invoke "f64.convert_s_i64" (i64.literal 9223372036854775807)) (f64.literal 9223372036854775807))
(assert_eq (invoke "f64.convert_s_i64" (i64.literal -9223372036854775808)) (f64.literal -9223372036854775808))
(assert_eq (invoke "f64.convert_s_i64" (i64.literal 4669201609102990)) (f64.literal 4669201609102990)) ;; Feigenbaum

(assert_eq (invoke "f32.convert_u_i32" (i32.literal 1)) (f32.literal 1.0))
(assert_eq (invoke "f32.convert_u_i32" (i32.literal 0)) (f32.literal 0.0))
(assert_eq (invoke "f32.convert_u_i32" (i32.literal 2147483647)) (f32.literal 2147483647))
(assert_eq (invoke "f32.convert_u_i32" (i32.literal -2147483648)) (f32.literal 2147483648))
(assert_eq (invoke "f32.convert_u_i32" (i32.literal 0x12345678)) (f32.literal 305419896)) ;; 0x12345678
(assert_eq (invoke "f32.convert_u_i32" (i32.literal 0xffffffff)) (f32.literal 4294967296.0))

(assert_eq (invoke "f32.convert_u_i64" (i64.literal 1)) (f32.literal 1.0))
(assert_eq (invoke "f32.convert_u_i64" (i64.literal 0)) (f32.literal 0.0))
(assert_eq (invoke "f32.convert_u_i64" (i64.literal 9223372036854775807)) (f32.literal 9223372036854775807))
(assert_eq (invoke "f32.convert_u_i64" (i64.literal -9223372036854775808)) (f32.literal 9223372036854775808))
(assert_eq (invoke "f32.convert_u_i64" (i64.literal 0xffffffffffffffff)) (f32.literal 18446744073709551616.0))

(assert_eq (invoke "f64.convert_u_i32" (i32.literal 1)) (f64.literal 1.0))
(assert_eq (invoke "f64.convert_u_i32" (i32.literal 0)) (f64.literal 0.0))
(assert_eq (invoke "f64.convert_u_i32" (i32.literal 2147483647)) (f64.literal 2147483647))
(assert_eq (invoke "f64.convert_u_i32" (i32.literal -2147483648)) (f64.literal 2147483648))
(assert_eq (invoke "f64.convert_u_i32" (i32.literal 0xffffffff)) (f64.literal 4294967295.0))

(assert_eq (invoke "f64.convert_u_i64" (i64.literal 1)) (f64.literal 1.0))
(assert_eq (invoke "f64.convert_u_i64" (i64.literal 0)) (f64.literal 0.0))
(assert_eq (invoke "f64.convert_u_i64" (i64.literal 9223372036854775807)) (f64.literal 9223372036854775807))
(assert_eq (invoke "f64.convert_u_i64" (i64.literal -9223372036854775808)) (f64.literal 9223372036854775808))
(assert_eq (invoke "f64.convert_u_i64" (i64.literal 0xffffffffffffffff)) (f64.literal 18446744073709551616.0))

(assert_eq (invoke "f64.promote_f32" (f32.literal 0.0)) (f64.literal 0.0))
(assert_eq (invoke "f64.promote_f32" (f32.literal -0.0)) (f64.literal -0.0))
(assert_eq (invoke "f64.promote_f32" (f32.literal 1.401298e-45)) (f64.literal 1.401298464324817e-45))
(assert_eq (invoke "f64.promote_f32" (f32.literal -1.401298e-45)) (f64.literal -1.401298464324817e-45))
(assert_eq (invoke "f64.promote_f32" (f32.literal 1.0)) (f64.literal 1.0))
(assert_eq (invoke "f64.promote_f32" (f32.literal -1.0)) (f64.literal -1.0))
(assert_eq (invoke "f64.promote_f32" (f32.literal 1.4012985e-45)) (f64.literal 1.401298464324817e-45))
(assert_eq (invoke "f64.promote_f32" (f32.literal -1.4012985e-45)) (f64.literal -1.401298464324817e-45))
(assert_eq (invoke "f64.promote_f32" (f32.literal -3.4028235e+38)) (f64.literal -3.4028234663852886e+38))
(assert_eq (invoke "f64.promote_f32" (f32.literal 3.4028235e+38)) (f64.literal 3.4028234663852886e+38))
;; Generated randomly by picking a random int and reinterpret it to float.
(assert_eq (invoke "f64.promote_f32" (f32.literal 1.5046328e-36)) (f64.literal 1.504632769052528e-36))
;; Generated randomly by picking a random float.
(assert_eq (invoke "f64.promote_f32" (f32.literal 6.6382537e+37)) (f64.literal 6.6382536710104395e+37))

(assert_eq (invoke "f32.demote_f64" (f64.literal 0.0)) (f32.literal 0.0))
(assert_eq (invoke "f32.demote_f64" (f64.literal -0.0)) (f32.literal -0.0))
(assert_eq (invoke "f32.demote_f64" (f64.literal 4.940656e-324)) (f32.literal 0.0))
(assert_eq (invoke "f32.demote_f64" (f64.literal -4.940656e-324)) (f32.literal -0.0))
(assert_eq (invoke "f32.demote_f64" (f64.literal 1.0)) (f32.literal 1.0))
(assert_eq (invoke "f32.demote_f64" (f64.literal -1.0)) (f32.literal -1.0))
(assert_eq (invoke "f32.demote_f64" (f64.literal -1.401298464324817e-45)) (f32.literal -1.4012985e-45))
(assert_eq (invoke "f32.demote_f64" (f64.literal 1.401298464324817e-45)) (f32.literal 1.4012985e-45))
(assert_eq (invoke "f32.demote_f64" (f64.literal 3.402823466385289e+38)) (f32.literal 3.4028235e+38))
(assert_eq (invoke "f32.demote_f64" (f64.literal -3.402823466385289e+38)) (f32.literal -3.4028235e+38))
(assert_eq (invoke "f32.demote_f64" (f64.literal 1.504632769052528e-36)) (f32.literal 1.5046328e-36))
(assert_eq (invoke "f32.demote_f64" (f64.literal 6.6382536710104395e+37)) (f32.literal 6.6382537e+37))

(assert_eq (invoke "f32.reinterpret_i32" (i32.literal 0)) (f32.literal 0.0))
(assert_eq (invoke "f32.reinterpret_i32" (i32.literal 0x80000000)) (f32.literal -0.0))
(assert_eq (invoke "f32.reinterpret_i32" (i32.literal 1)) (f32.literal 1.4012984e-45))
(assert_eq (invoke "f32.reinterpret_i32" (i32.literal 123456789)) (f32.literal 1.6535997e-34))
(assert_eq (invoke "f32.reinterpret_i32" (i32.literal -2147483647)) (f32.literal -1.4012984e-45))

(assert_eq (invoke "f64.reinterpret_i64" (i64.literal 0)) (f64.literal 0.0))
(assert_eq (invoke "f64.reinterpret_i64" (i64.literal 1)) (f64.literal 4.94066e-324))
(assert_eq (invoke "f64.reinterpret_i64" (i64.literal 0x8000000000000000)) (f64.literal -0.0))
(assert_eq (invoke "f64.reinterpret_i64" (i64.literal 1234567890)) (f64.literal 6.099575819077150e-315))
(assert_eq (invoke "f64.reinterpret_i64" (i64.literal -9223372036854775807)) (f64.literal -4.940656458412465e-324))

(assert_eq (invoke "i32.reinterpret_f32" (f32.literal 0.0)) (i32.literal 0))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal -0.0)) (i32.literal 0x80000000))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal 1.401298e-45)) (i32.literal 1))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal -1.401298e-45)) (i32.literal 0x80000001))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal 1.0)) (i32.literal 1065353216))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal 3.1415926)) (i32.literal 1078530010))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal 3.4028235e+38)) (i32.literal 2139095039))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal -3.4028235e+38)) (i32.literal -8388609))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal 1.4012984e-45)) (i32.literal 1))
(assert_eq (invoke "i32.reinterpret_f32" (f32.literal -1.4012984e-45)) (i32.literal -2147483647))

(assert_eq (invoke "i64.reinterpret_f64" (f64.literal 0.0)) (i64.literal 0))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal -0.0)) (i64.literal 0x8000000000000000))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal 4.940656e-324)) (i64.literal 1))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal -4.940656e-324)) (i64.literal 0x8000000000000001))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal 1.0)) (i64.literal 4607182418800017408))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal 3.14159265358979)) (i64.literal 4614256656552045841))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal 1.7976931348623157e+308)) (i64.literal 9218868437227405311))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal -1.7976931348623157e+308)) (i64.literal -4503599627370497))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal 4.9406565e-324)) (i64.literal 1))
(assert_eq (invoke "i64.reinterpret_f64" (f64.literal -4.9406565e-324)) (i64.literal -9223372036854775807))
