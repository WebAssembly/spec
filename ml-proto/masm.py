#!/usr/bin/env python

import sexp

class LowerWhileLoop(sexp.IdentityTransform):
    """High-level-style top-test "while" loop expansion."""

    def transform_list_postorder(self, x):
        if not x.is_operator('while'):
            return x
        if x.num_operands() != 2:
            raise "a while loop should have exactly 2 operands"

        condition = x.get_operand(0)
        body = x.get_operand(1)

        # While the code may look scary at first, consider:
        # Top-test while loops are suboptimal, so what's really happening here
        # is that the macro is optimizing the loop for you. Second, it'll be
        # shorter once we get br_if. And third, there's probably a way to write
        # a python API to make the actual python code here shorter. I'm fairly
        # inexperienced in python and would welcome suggestions on how best to
        # do that.
        s = sexp.SExp
        return s([s('if'),
                  condition,
                  s([s('loop'), s('$exit'),
                     body,
                     s([s('if'),
                        s([s('i32.eq'),
                           condition,
                           s([s('i32.const'), s(0)]),
                          ]),
                        s([s('break'), s('$exit')])
                       ])
                    ])
                 ])

def transform_expr(fromExpr):
    toExpr = sexp.transform(fromExpr, LowerWhileLoop())
    return toExpr

def transform_string(fromStr):
    fromExpr = sexp.parse_toplevel(fromStr)
    toExpr = transform_expr(fromExpr)
    toStr = sexp.toplevel_to_string_with_template(toExpr, fromStr)
    return toStr

def transform_file(fromPath, toPath):
    fromFile = open(fromPath, 'r')
    fromStr = fromFile.read()
    fromFile.close()
    toStr = transform_string(fromStr)
    toFile = open(toPath, 'w')
    toFile.write(';; Generated by masm.py from ' + fromPath + '\n')
    toFile.write(toStr)
    toFile.close()
